#+title: Configuración completa de sistema operativo y aplicaciones básicas
#+author: Juan E. Gómez-Morantes, PhD

#+property: header-args :mkdirp yes
 
* Introducción
Este archivo define, en un estilo literario, la configuración de todo mi sistema operativo y sus aplicaciones básicas. Para esto hace uso intensivo del paguete =org= de =Emacs=, las funcionalidades de tangling y noweb de =org=.

Dado que este archivo de configuración se usa para diferentes máquinas, se quiere tener un proceso de /tangling/ interactivo en donde se especifiquen algunos valores específicos a la hora de generar los archivos respectivos. En adición, esto también permite ingresar información sensible como correos electrónicos al momento de hacer el /tangling/, evitando así su ingreso a repositorios git. Esto se logra con el siguiente bloque de código:

#+name: pregunta
#+begin_src emacs-lisp :tangle no :var p="" :session temporal
  (unless (boundp 'propiedades)
    (setq propiedades '()))
  (unless (lax-plist-get propiedades p)
    (setq propiedades (lax-plist-put propiedades 
                                     p 
                                     (read-string p))))
  (lax-plist-get propiedades p)
#+end_src

#+name: secreto
#+begin_src emacs-lisp :tangle no :var host="" :var item=""
  (plist-get (nth 0 (auth-source-search :host host)) 
             (intern (concat ":" item)))
#+end_src

Nótece que se hacen las preguntas de la misma forma, el código anterior guarda respuestas previas y no vuelve a hacer la pregunta.

Esta configuración es para un sistema operativo basado en la versión 21.05 de [[https://nixos.org][NixOS]].

* Cómo usar este archivo
Desde emacs, se debe hacer un tangling de este archivo. Eso es todo.

Lo que se logra con esto es generar una serie de archivos de configuración en las ubicaciones correctas tanto para NixOS como para los paquetes configurados en este archivo. En adición, se genera un script (=./post-tangle.sh=) que debe ser ejecutado con =sudo= para que copie los archivos necesarios en carpetas son acceso para usuarios normales. 

** Script post-tangle
*** Mover ./configuration.nix a /etc/nixos/configuration.nix
#+begin_src sh :tangle ./post-tangle.sh
  #!/bin/sh
  sudo cp ./configuration.nix /etc/nixos/configuration.nix
#+end_src

** Otros pasos a completar
+ Iniciar sesión en almacenamiento en nube
+ Configuración de llave para autenticación en github. 
+ Emacs
  - =all-the-icons-install-fonts=

* Sistema operativo
:PROPERTIES:
:header-args:nix: :tangle ./configuration.nix
:END:
NixOS se configura, en términos de paquetes, servicios, y opciones iniciales, en el archivo =/etc/nixos/configuration.nix=. Para evitar problemas de usuarios y accesos, este archivo se crea en =./= y se genera un script para moverlo a =/etc/nixos/configuration.nix=. De esta forma nos evitamos enredos a la hora de hacer el tangling de este archivo desde emacs.

#+begin_src nix :noweb no-export
  { config, pkgs, ... }:
  let 
    <<nixos-let>>
  in
  {
    <<nixos-base>>

    <<nixos-overlays>>  

    # List packages installed in system profile. To search, run:
    # $ nix search wget
    environment.systemPackages = with pkgs; [
      <<nixos-paquetes>>
      #openssl
      pcloud
      pinentry
      stow
    ];

    <<nixos-configuracion-paquetes>>

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "21.05"; # Did you read the comment?
}
#+end_src

** Habilitar canal inestable
#+begin_src nix :tangle no :noweb-ref nixos-let
  unstable = import (builtins.fetchTarball https://github.com/nixos/nixpkgs/tarball/nixos-unstable-small)
    { config = config.nixpkgs.config; }; 
#+end_src

** Grub y carga
Usar OS Prober para detectar otros sitemas operativos en el disco y configurar el /dual boot/.

#+begin_src nix :tangle no :noweb-ref nixos-base
#boot.loader.grub.enable = true;
#boot.loader.grub.version = 2;
#boot.loader.grub.device = "/dev/sda";
#boot.loader.grub.useOSProber = true;
#+end_src

** Incluir resultados del escaneo de /hardware/
#+begin_src nix :tangle no :noweb-ref nixos-base
imports =
  [ 
    ./hardware-configuration.nix
  ];
#+end_src

** Periféricos 
*** Trackpad
#+begin_src nix :tangle no :noweb-ref nixos-base
  # Enable touchpad support (enabled default in most desktopManager).
  services.xserver.libinput.enable = true;
#+end_src

*** Sonido
#+begin_src nix :tangle no :noweb-ref nixos-base
  sound.enable = false;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    media-session.config.bluez-monitor.rules = [
      {
        # Matches all cards
        matches = [ { "device.name" = "~bluez_card.*"; } ];
        actions = {
          "update-props" = {
            "bluez5.reconnect-profiles" = [ "hfp_hf" "hsp_hs" "a2dp_sink" ];
            # mSBC is not expected to work on all headset + adapter combinations.
            "bluez5.msbc-support" = true;
            # SBC-XQ is not expected to work on all headset + adapter combinations.
            "bluez5.sbc-xq-support" = true;
          };
        };
      }
      {
        matches = [
          # Matches all sources
          { "node.name" = "~bluez_input.*"; }
          # Matches all outputs
          { "node.name" = "~bluez_output.*"; }
        ];
        actions = {
          "node.pause-on-idle" = false;
        };
      }
    ];
  };
#+end_src

*** Servicio de impresión (con CUPS)
#+begin_src nix :tangle no :noweb-ref nixos-base
  # Enable CUPS to print documents.
  # services.printing.enable = true;
#+end_src

*** Bluetooth
#+begin_src nix :tangle no :noweb-ref nixos-base
  # Habilitar bluetooth
  # GNome 40 no requiere esto, pero Plasma 5 sí...
  hardware.bluetooth.enable = true;
  services.blueman.enable = true;
#+end_src

** Activación de gnupg agent
#+begin_src nix :tangle no :noweb-ref nixos-base
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  programs.gnupg.agent = {
     enable = true;
  #   enableSSHSupport = true;
  };
#+end_src

** Usuarios
#+begin_src nix :tangle no :noweb-ref nixos-base
  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.juan = {
     isNormalUser = true;
     extraGroups = [ "wheel" ]; # Enable ‘sudo’ for the user.
  };
#+end_src

** Permitir paquetes no /free/
#+begin_src nix :tangle no :noweb-ref nixos-base
  # Permite la instalacion de paquetes non free
  nixpkgs.config.allowUnfree = true;
#+end_src

** Internacionalización
#+begin_src nix :tangle no :noweb-ref nixos-base
  # Select internationalisation properties.
  # i18n.defaultLocale = "en_US.UTF-8";
  # console = {
  #   font = "Lat2-Terminus16";
  #   keyMap = "us";
  # };

  # Configure keymap in X11
  services.xserver.layout = "latam";
  # services.xserver.xkbOptions = "eurosign:e";
#+end_src

** Escritorios y manejadores gráficos
*** X11
#+begin_src nix :tangle no :noweb-ref nixos-base
  # Enable the X11 windowing system.
  services.xserver.enable = true;
#+end_src

*** Gnome
#+begin_src nix :tangle no :noweb-ref nixos-base
  #services.xserver.displayManager.gdm.enable = true;
  #services.xserver.desktopManager.gnome.enable = true;
#+end_src

**** Configuración
La configuración de Gnome no se hace con archivos de configuración sin con una base de datos que se guarda en formato binario y se manipula con el comando =gsettings=.

***** Usar =caps= como =ctrl=
#+begin_src sh :tangle ./post-tangle.sh
  #gsettings set org.gnome.desktop.input-sources xkb-options "['caps:ctrl_modifier', 'lv3:ralt_switch']"
#+end_src

***** Teclado en español
#+begin_src sh :tangle ./post-tangle.sh
  #gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'latam')]"
#+end_src

***** Formato de 12 horas
#+begin_src sh :tangle ./post-tangle.sh
  #gsettings set org.gnome.desktop.interface clock-format '12h'
  #gsettings set org.gtk.Settings.FileChooser clock-format '12h'
#+end_src

*** Plasma
#+begin_src nix :tangle no :noweb-ref nixos-base
  services.xserver.displayManager.sddm.enable = true;
  services.xserver.desktopManager.plasma5.enable = true;
#+end_src

**** Configuración
***** Usar =caps= como =ctrl=
#+begin_src sh :tangle ./post-tangle.sh
  kwriteconfig5 --file $HOME/.config/kxkbrc --group "Layout" --key "Options" "terminate:ctrl_alt_bksp,ctrl:nocaps"
#+end_src

***** Desligar M-SPC de KRunner (para que se pueda usar en emacs)
#+begin_src sh :tangle ./post-tangle.sh
  kwriteconfig5 --file $HOME/.config/kglobalshortcutsrc --group "krunner.desktop" "_launch" "Search\tAlt+F2\tMeta+Space,Alt+Space\tAlt+F2\tSearch,KRunner"
#+end_src

***** Gestión de ventanas
****** Cambiador de tareas (con M-TAB)
#+begin_src sh :tangle ./post-tangle.sh
  kwriteconfig5 --file $HOME/.config/kwinrc --group "Effect-CoverSwitch" "TabBox" "true"
  kwriteconfig5 --file $HOME/.config/kwinrc --group "Effect-CoverSwitch" "WindowTitle" "false"
  kwriteconfig5 --file $HOME/.config/kwinrc --group "TabBox" "coverswitchEnabled" "true"
  kwriteconfig5 --file $HOME/.config/kwinrc --group "TabBox" "LayoutName" "coverswitch"
#+end_src
****** Abrir ventanas nuevas centradas en la pantalla
[Windows]
Placement=Centered

#+begin_src sh :tangle ./post-tangle.sh
  kwriteconfig5 --file $HOME/.config/kwinrc --group "Windows" "Placement" "Centered"
#+end_src

** Configuración de carga de sistema operativo
#+begin_src nix :tangle no :noweb-ref nixos-base
  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
#+end_src

** Configuración de red y conectividad
#+begin_src nix :tangle no :noweb no-export :noweb-ref nixos-base
  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  networking.hostName = "<<pregunta("Nombre del host a configurar: ")>>"; # Define your hostname.
  networking.wireless.enable = false;  # Enables wireless support via wpa_supplicant.
  networking.networkmanager.enable = true;

  # The global useDHCP flag is deprecated, therefore explicitly set to false here.
  # Per-interface useDHCP will be mandatory in the future, so this generated config
  # replicates the default behaviour.
  networking.useDHCP = false;
  networking.interfaces.wlp2s0.useDHCP = true;

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  networking.firewall.allowedTCPPortRanges = [ { from = 1714; to = 1764; } ];
  networking.firewall.allowedUDPPortRanges = [ { from = 1714; to = 1764; } ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;
#+end_src

** Zona horario
#+begin_src nix :tangle no :noweb-ref nixos-base
time.timeZone = "America/Bogota";
#+end_src

** Configuración de servidor cachix
#+begin_src nix :tangle no :noweb-ref nixos-base
nix = {
    binaryCaches = [ "https://nix-community.cachix.org/" ];
    binaryCachePublicKeys = [
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
    ];
};
#+end_src

** Activar gnome-keyring
#+begin_src nix :tangle no :noweb-ref nixos-base
#services.gnome.gnome-keyring.enable = true;
#+end_src

** Fuentes
#+begin_src nix :tangle no :noweb-ref nixos-base
  fonts.fonts = with pkgs; [ 
    eb-garamond
    inconsolata-lgc
    vistafonts
  ];
#+end_src

* Aplicaciones y paquetes
** Emulador de terminales
*** [[https:alacritty.org][Alacritty]] 
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
alacritty 
#+end_src

**** Configuración
***** Definición de fuente
#+begin_src yml :tangle ~/.config/alacritty/alacritty.yml
font:
  normal:
    family: Inconsolata LGC
#+end_src

** Navegadores web
*** [[https:www.mozilla.org/en-US/firefox/][Firefox]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
firefox
#+end_src

*** [[https:qutebrowser.org][Qutebrowser]] 
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
  qutebrowser
#+end_src

**** Configuración básica
#+begin_src python :tangle ~/.config/qutebrowser/config.py
  # No tomar en cuenta configuraciones hechas por gui
  config.load_autoconfig(False)

  # Tema oscuro para páginas web
  c.colors.webpage.darkmode.enabled = False

  # Habilitar pdf.js para visualización de pdfs
  c.content.pdfjs = True
#+end_src

***** Guardar sesión
#+begin_src python :tangle ~/.config/qutebrowser/config.py
  c.auto_save.session = True
#+end_src

**** Buscadores
#+begin_src python :tangle ~/.config/qutebrowser/config.py
  c.url.searchengines = {'DEFAULT': 'https://duckduckgo.com/?q={}', 
                         'am': 'https://www.amazon.com/s?k={}',
                         'np': 'https://search.nixos.org/packages/?query={}',
                         'no': 'https://search.nixos.org/options/?query={}',
                         'go': 'https://www.google.com/search?q={}', 
                         'gs': 'https://scholar.google.com/scholar?q={}', 
                         're': 'https://www.reddit.com/r/{}', 
                         'yt': 'https://www.youtube.com/results?search_query={}'}
#+end_src

**** Acordes
#+begin_src python :tangle ~/.config/qutebrowser/config.py
  # C-j y C-k para navegar opciones de completion
  config.bind('<Ctrl+j>', 'completion-item-focus next', mode='command')
  config.bind('<Ctrl+k>', 'completion-item-focus prev', mode='command')
  config.bind('<Ctrl+j>', 'tab-prev', mode='normal')
  config.bind('<Ctrl+k>', 'tab-next', mode='normal')
  config.bind('<Ctrl+h>', 'tab-prev', mode='normal')
  config.bind('<Ctrl+l>', 'tab-next', mode='normal')
#+end_src

***** De apertura de aplicaciones externas
#+begin_src python :tangle ~/.config/qutebrowser/config.py
  config.bind('<Space>ov','hint links spawn mpv {hint-url}' , mode='normal')
#+end_src

***** De buscadores
#+begin_src python :tangle ~/.config/qutebrowser/config.py
#+end_src

***** De manipulación de /buffers/ (/tabs/)
#+begin_src python :tangle ~/.config/qutebrowser/config.py
  config.bind('<Space>bN','tab-give' , mode='normal')
  config.bind('<Space>be','tab-close' , mode='normal')
#+end_src

***** De ayuda
#+begin_src python :tangle ~/.config/qutebrowser/config.py
  config.bind('<Space>hc','config-source' , mode='normal')
#+end_src

*** [[https:brave.com][Brave]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
brave
#+end_src

** Multimedia
*** [[https:www.spotify.com][Spotify]]
Si bien el cliente oficial de spotify para linux funciona bien en NixOS (con el paquete =spotify=), prefiero usarlo en terminal con la combinación =spotifyd= + =spotify-tui=.

#+begin_src nix :tangle no :noweb-ref nixos-paquetes
spotify
spotifyd
unstable.spotify-tui
#+end_src

**** Configuración de [[https://github.com/Spotifyd/spotifyd][Spotifyd]]
#+begin_src toml :tangle ~/.config/spotifyd/spotifyd.conf :noweb no-export
[global]
username = "<<secreto("spotify.com", "user")>>"
password_cmd = "gpg2 -q --for-your-eyes-only --no-tty -d ~/.config/spotifyd/.spotifyd-pass.gpg"

# If set to true, `spotifyd` tries to bind to the session dbus
# and expose MPRIS controls. When running headless, without a dbus session,
# then set this to false to avoid binding errors
#
use_mpris = true

# The audio backend used to play the your music. To get
# a list of possible backends, run `spotifyd --help`.
backend = "alsa"

# The alsa audio device to stream audio to. To get a
# list of valid devices, run `aplay -L`,
device = "default" 

# The alsa control device. By default this is the same
# name as the `device` field.
#control = "alsa_audio_device"

# The volume controller. Each one behaves different to
# volume increases. For possible values, run
# `spotifyd --help`.
volume_controller = "alsa" 

# A command that gets executed in your shell after each song changes.
#on_song_change_hook = "command_to_run_on_playback_events"

# The name that gets displayed under the connect tab on
# official clients. Spaces are not allowed!
device_name = "spotifyd"

bitrate = 320
cache_path = "/home/juan/.config/spotifyd/cache"

# If set to true, audio data does NOT get cached.
no_audio_cache = false

# Volume on startup between 0 and 100
# NOTE: This variable's type will change in v0.4, to a number (instead of string)
initial_volume = "90"

volume_normalisation = true

# The normalisation pregain that is applied for each song.
normalisation_pregain = -10

# The displayed device type in Spotify clients.
# Can be unknown, computer, tablet, smartphone, speaker, t_v,
# a_v_r (Audio/Video Receiver), s_t_b (Set-Top Box), and audio_dongle.
device_type = "speaker"
#+end_src

Para poder usar =spotifyd= sin tener contraseñas en archivos de texto, se agrega lo siguiente al script de post-tangle para crear el archivo encriptado con la contraseña usada en el archivo de configuración de =spotifyd=.

#+begin_src sh :tangle ./inicio-correo.sh :noweb no-export
  echo "Ingrese la contraseña de spotify (para spotifyd)"
  read contraSpo
  echo $contraSpo>.spotifyd-pass
  gpg2 --output .spotifyd-pass.gpg --symmetric .spotifyd-pass
  rm .spotifyd-pass
  mv .spotifyd-pass.gpg ~/.config/spotifyd
#+end_src

*** [[https:www.pinta-project.com][Pinta]] 
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
pinta
#+end_src

*** [[https://mpv.io/][MPV]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
mpv
#+end_src

*** [[https://obsproject.com/][OBS]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
obs-studio
#+end_src

** Lectura de documentos
*** [[http:wiki.gnome.org/Apps/Evince][Evince]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
evince
#+end_src

*** [[https:calibre-ebook.com][Calibre]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
calibre
#+end_src

*** [[https://okular.kde.org/][Okular]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
libsForQt5.okular
#+end_src

** Desarrollo e ingeniería
*** [[https:www.archimatetool.com][Archi]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
archi
#+end_src

*** [[https://www.python.org/][Python]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
python3Full
#+end_src

** Academia
*** [[https:www.jabref.org][Jabref]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
jabref
#+end_src

*** [[https:www.zotero.org][Zotero]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
zotero
#+end_src

** Edición de texto y ofimática
*** [[https:www.libreoffice.org][Libreoffice]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
libreoffice
#+end_src

*** Latex (con [[https:tectonic-typesetting.github.io][Tectonic]])
Se requiere =tectonic= 7+ para tener compatibilidad con =biber= y =biblatex=. Esta versión sólo está en el canal unstable de NixOS (a la fecha [2021-08-20 Fri]).

Tectonic no instala biber, así que toca instalarlo "a mano".
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
unstable.tectonic
biber
#+end_src

*** [[https:www.pdflabs.com/tools/pdftk-the-pdf-toolkit/][Pdftk]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
pdftk
#+end_src

*** [[https://hackage.haskell.org/package/pandoc][Pandoc]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
pandoc
#+end_src

*** [[http://www.gnu.org/software/emacs/][Emacs]] 
**** Instalación
Emacs requiere configurar un overlay para poder instalar la última versión (28.0 con GCC y PGTK a la fecha [2022-01-11 Tue]).

#+begin_src nix :tangle no :noweb-ref nixos-overlays
services.emacs.package = pkgs.emacsPgtkGcc;
nixpkgs.overlays = [
  (import (builtins.fetchGit {
     url = "https://github.com/nix-community/emacs-overlay.git";
     ref = "master";
     # rev = "bfc8f6edcb7bcf3cf24e4a7199b3f6fed96aaecf";
  }))
];
#+end_src

Luego, para instalar con paquetes que requieran compilación (como =vterm=), se define un emacs específico en la sección let de nixos.


#+begin_src nix :tangle no :noweb-ref nixos-let
  emacsWithPackages = (pkgs.emacsPackagesGen pkgs.emacsPgtkGcc).emacsWithPackages (epkgs: ([epkgs.vterm]));
#+end_src

Ahora sí se puede instalar =emacs= con gcc (definido en el paso anterior).

#+begin_src nix :tangle no :noweb-ref nixos-paquetes
  emacsWithPackages
#+end_src

**** Configuración
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/init.el
:END:
#+begin_quote
Fuck vim, all my homies use emacs
#+end_quote

***** Native comp
****** Ignorar reporte de /warnings/ de compilación
#+begin_src emacs-lisp
  (setq native-comp-async-report-warnings-errors nil)
#+end_src

***** Manejador de paquetes
Esta configuración está basada en =straight= y =use-package=. En esta sección se =straight= siguiendo las instrucciones encontradas en https://github.com/raxod502/straight.el, y se hace la configuración inicial para la instalación de =use-package= y su integración con =straight=.

#+begin_src emacs-lisp
  (setq package-enable-at-startup nil)

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
                                      'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src 
  
***** Interfaz
****** Configuración básica
#+begin_src emacs-lisp
  (scroll-bar-mode -1)        ; Desabilitar el scroll bar
  (tool-bar-mode -1)          ; Desabilitar la barra de herramientas
  (tooltip-mode -1)           ; Desabilitar tool tips
  (set-fringe-mode 10)        ; Dar algo de espacio entre ventanas
  (menu-bar-mode -1)          ; Desabilitar barra de menú
  (global-visual-line-mode)   ; Word wrapping por defecto en todos los modos
  (global-auto-revert-mode t) ; Activar global auto-revert 
#+end_src
****** Fuentes
Uso [[https://github.com/DeLaGuardo/Inconsolata-LGC][Inconsolata-LGC]] (la inconsolata normal no tiene cursiva) como fuente global de emacs. Algunos modos cambian la fuente.

La lista de fuentes disponibles para emacs se puede consultar ejecutando el siguiente bloque de código:

#+begin_src emacs-lisp :tangle no
  (font-family-list)
#+end_src

Para poder usar inconsolata, es imporante verificar que esté disponible en esa lista.

#+begin_src emacs-lisp 
  (set-face-attribute 'fixed-pitch nil :font "Inconsolata LGC")
  (set-frame-font "Inconsolata LGC" nil t)
#+end_src

Para esto, la fuente debe estar instalada correctamente en el sistema. Si se usa desde wsl, se debe agregar la fuente a Ubuntu, no a Vcxsrv o al servidor de X11 que se esté usando. Esto se hace copiando la fuente a la carpeta apropiada dentro de =/usr/share/fonts= y actualizando el caché de fuentes de ubuntu con =sudo fc-cache -vr=. Luego de esto se puede verificar que la fuente quedó instalada ejecuntado =(font-family-list)= en emacs. Para este último paso lo más fácil es hacerlo dentro de un archivo de org tal y como se está realizando esta configuración y ejecutando el bloque de código respectivo.

****** =evil=
=evil= permite edición modal y uso de acordes estilo vim en Emacs. Esta sección se limita a instalación y configuración básica de =evil= y =general= (para la definición de acordes locales). Luego, en las secciones correspondientes a cada paquete, se hace la configuración de los acordes locales.
******* Configuración de =evil=
#+begin_src emacs-lisp
  (use-package evil
    :custom
    ;; Inicia en modo NORMAL por defecto en todos los modos
    (evil-default-state 'normal)
    ;; Para evitar conflictos con TAB en org-mode
    (evil-want-C-i-jump nil)
    :init
    ;; Para evitar conflictos con evil-collection
    (setq evil-want-keybinding nil)
    :config
    ;; Arracnar evil-mode por defecto
    (evil-mode))
#+end_src
    
******* Configuración de =general=
=general= es un paquete que ayuda a definir teclas líderes para diferentes conceptos, y es integrable con =use-package= usando la opción =:general=. En esta sección se define una tecla lider general (SPC) para arcordes globales y una tecla lider local (SPC m) para acordes relativos al modo actual.

#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    ;; defniciión de tecla lider global para modo normal.
    (general-create-definer j/lider
      :states '(normal insert emacs)
      :keymaps 'override
      :prefix "SPC"
      :non-normal-prefix "M-SPC")

    ;; definición de tecla lider local (relativo al major mode) para modo normal.
    (general-create-definer j/lider-local
      :states '(normal insert emacs)
      :prefix "SPC m"
      :non-normal-prefix "M-SPC m"))
#+end_src

******* Configuración de =evil-collection=
#+begin_src emacs-lisp :noweb no-export
  (use-package evil-collection
    :after evil
    :config 
    <<evil-collection-config>>)
#+end_src

******** Activar para modos específicos 
#+begin_src emacs-lisp :noweb-ref evil-collection-config :tangle no
  (with-eval-after-load 'magit (evil-collection-magit-setup))
  (with-eval-after-load 'dired (evil-collection-dired-setup))
  (with-eval-after-load 'dired (evil-collection-wdired-setup))
  (with-eval-after-load 'pdf-tools (evil-collection-pdf-setup))
  (with-eval-after-load 'ebib (evil-collection-ebib-setup))
  (with-eval-after-load 'nov (evil-collection-nov-setup))
#+end_src

****** =ivy= et. al.
Esta configuración hace uso extensivo de =ivy= y =cousel= para terminación. En esta sección se hacen todas las configuraciones relevantes al sistema de terminación.
  
******* TODO Configuración inicial de =ivy=
(ver cómo se pueden configurar =C-j= y =C-k= en =ivy-minibuffer-map= usando general)

#+begin_src emacs-lisp :noweb no-export
  (use-package ivy
    :diminish ivy-mode
    :bind (:map ivy-minibuffer-map
                ("C-j" . ivy-next-line)
                ("C-k" . ivy-previous-line))
    :config
    (ivy-mode 1))
#+end_src

******* Configuración de =counsel=
Activo counsel y enlazo =M-x= a =counsel-M-x=. Con esto se logra ver los binds actuales de los comandos. También se usa =counsel= en otros puntos de esta configuración como por ejemplo en los acordes de apertura de archivo.
    
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :custom
    (counsel-find-file-extern-extensions '("mp4" 
                                           "mkv" 
                                           "xlsx"
                                           "pptx" 
                                           "odt"
                                           "docx" 
                                           "xlsm" 
                                           "odp"))
    :config
    (global-set-key (kbd "M-x") 'counsel-M-x))
#+end_src

******* =ivy-rich= y =all-the-icons-ivy-rich=
Estos dos paquetes se usan para agregar íconos a ivy. Por ejemplo, agrega íconos a la selección de buffers o de apertura de archivos.
    
#+begin_src emacs-lisp
  (use-package ivy-rich
    :after (ivy counsel)
    :init
    (ivy-rich-mode 1))

  (use-package all-the-icons-ivy-rich
    :after ivy-rich
    :init (all-the-icons-ivy-rich-mode 1))
#+end_src

******* =prescient=
=presciente= le ayuda a =ivy= a mostrar opciones recientes y frecuentes en el tope de las listas mostradas para terminación.
  
#+begin_src emacs-lisp
  (use-package prescient
    :after ivy
    :config
    (use-package ivy-prescient
      :after counsel
      :config
      (ivy-prescient-mode)
      (prescient-persist-mode)))
#+end_src

****** =all-the-icons=
Este paquete instala fuentes con íconos que son usadas por muchos otros paquetes (e.g. [[Doom modeline]], Dired, [[ivy]], entre otros). Si luego de esta configuración no se logran visualizar los íconos, es porque falta ejecutar =(all-the-icons-install-fonts)=.

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

****** =doom-modeline=
#+begin_src emacs-lisp
  (use-package doom-modeline
    :after 
    all-the-icons
    :init 
    ;; Activar doom-modeline en todos los modos
    (doom-modeline-mode 1))
#+End_src

****** =which-key=
=which-key= es un paquete que muestra los acordes disponibles luego de iniciar un acorde normal o tipo vim. Lo que hace es mostrar un diálogo que muestra las opciones disponibles luego de iniciar un comando. Por ejemplo, si se presiona =C-c=, =which-key= muestra un diálogo con todos los comandos que se pueden ejecutar luego de =C-c= y la descripción de la función a ejecutar. También muestra comandos que abren más opciones (e.g. =C-c C-x=). 

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

****** Tema gráfico
Uso el tema gráfico =modus-vivendi= de Protesilaos (https://gitlab.com/protesilaos/modus-themes).

#+begin_src emacs-lisp
  (use-package modus-themes
    :config
    ;; Cargar los temas
    (modus-themes-load-themes)
    ;; Cargar modus-vivendi
    (modus-themes-load-vivendi))
#+end_src

****** =helpful=
=helpful= es un paquete que mejora sustancialmente los /buffers/ de ayuda estándares de Emacs. Se carga después de general para integrarlo con ese paquete.

#+begin_src emacs-lisp
  (use-package helpful
    :after
    counsel
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :general
    (general-define-key
     :states '(normal insert emacs)
     :keymaps 'helpful-mode-map
     ;; Marcas
     "q" '(quit-window :which-key "salir")))
#+end_src

****** =rainbow delimiters=
Este paquete agrega color a los paréntesis para tener una referencia gráfica de parejas de paréntesis.
   
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook 
    (org-mode . rainbow-delimiters-mode)
    (prog-mode . rainbow-delimiters-mode))
#+end_src

****** Acordes generales
******* Operaciones sobre modos de edición
#+begin_src emacs-lisp
  (j/lider
    "SPC" '(evil-normal-state :which-key "volver a modo normal"))
#+end_src

******* Acordes de archivos
#+begin_src emacs-lisp
  (j/lider
    :infix "a"
    "" '(:ignore t :which-key "archivo")
    "a" '(counsel-find-file :which-key "abrir archivo")
    "A" '(counsel-recentf :which-key "abrir reciente")
    "g" '(save-buffer :which-key "guardar")
    "e" '(j/delete-file-and-buffer :which-key "cerrar y eliminar")
    "G" '(write-file :which-key "guardar como"))
#+end_src

Algunas opciones de menú de archivo requieren funciones auxiliares:
#+begin_src emacs-lisp
  (defun j/delete-file-and-buffer ()
    "Eliminar el archivo actual del disco duro y cierra su buffer"
    (interactive)
    (let ((filename (buffer-file-name)))
      (if filename
          (if (y-or-n-p (concat "De verdad quiere eliminar " filename " ?"))
              (progn
                (delete-file filename)
                (message "%s eliminado." filename)
                (kill-buffer)))
        (message "Este buffer no representaba un archivo"))))
#+end_src

******* Operaciones sobre ventanas
#+begin_src emacs-lisp
  (j/lider
    :infix "v"
    "" '(:ignore t :which-key "window")
    "e" '(evil-window-delete :which-key "cerrar ventaan")
    "d" '(evil-window-split :which-key "dividir horizontalmente")
    "<" '(evil-window-decrease-width :which-key "reducir ancho")
    ">" '(evil-window-increase-width :which-key "aumentar ancho")
    "j" '(evil-window-down :which-key "ir abajo")
    "q" '(evil-quit-all :which-key "salir de emacs")
    "k" '(evil-window-up :which-key "ir arriba")
    "h" '(evil-window-left :which-key "ir a izquierda")
    "l" '(evil-window-right :which-key "ir a derecha")
    "o" '(delete-other-windows :which-key "cerrar otras ventanas")
    "TAB" '(evil-window-next :which-key "siguiente ventana")
    "v" '(evil-window-vsplit :which-key "dividir verticalmente"))
#+end_src

******* Operaciones sobre /frames/
#+begin_src emacs-lisp
  (j/lider
    :infix "f"
    "" '(:ignore t :which-key "frames")
    "TAB" '(other-frame :which-key "siguiente frame")
    "q" '(delete-frame :which-key "cerrar ")
    "c" '(make-frame :which-key "crear frame"))
#+end_src

******* Operaciones sobre buffers
#+begin_src emacs-lisp
  (j/lider
    :infix "b"
    "" '(:ignore t :which-key "buffer")
    "e" '(kill-this-buffer :which-key "cerrar buffer")
    "k" '(previous-buffer :which-key "buffer previo")
    "-" '(text-scale-adjust :which-key "reducir fuente")
    "+" '(text-scale-adjust :which-key "aumentar fuente")
    "r" '(revert-buffer :which-key "revert-buffer")
    "v" '(visual-line-mode :which-key "visual-line-mode")
    "b" '(counsel-switch-buffer :which-key "buscar buffer")
    "u" '(evil-switch-to-windows-last-buffer :which-key "último buffer")
    "j" '(next-buffer :which-key "siguiente buffer"))
#+end_src

******* Finalización
#+begin_src emacs-lisp
  (general-define-key
   :states '(normal insert emacs)
   "C-M-i" '(completion-at-point :which-key "completar"))
#+end_src

******* Menú de ayuda
#+begin_src emacs-lisp
  (j/lider
    :infix "h"
    "" '(:ignore t :which-key "ayuda")
    "m" '(describe-mode :which-key "describir modo")
    "f" '(counsel-describe-function :which-key "describir función")
    "v" '(counsel-describe-variable :which-key "describir variable")
    "K" '(describe-key-briefly :which-key "describe-key-briefly")
    "w" '(where-is :which-key "where-is")
    "F" '(counsel-describe-face :which-key "describir face")
    "t" '(helpful-key :which-key "describir tecla"))
#+end_src

******* Menú de accesos directos
#+BEGIN_SRC emacs-lisp
  (j/lider
    :infix "o"
    "" '(:ignore t :which-key "ir a")
    "a" '(org-agenda :which-key "agenda")
    "g" '(j/gtd :which-key "archivo gtd")
    "d" '(dired :which-key "dired")
    "s" '(eshell :which-key "eshell")
    "t" '(org-todo-list :which-key "lista completa TO-DO"))

  (defun j/gtd ()
    "Abre archivo ~/personal/orgmode/gtd.org"
    (interactive)
    (find-file "~/personal/orgmode/gtd.org"))
#+END_SRC

******* Movimiento
Mapa de movimiento general (cualquier modo)

#+begin_src emacs-lisp
  (general-define-key
   :states '(normal)
   "j" '(evil-next-visual-line :which-key "siguiente linea visual")
   "k" '(evil-previous-visual-line :which-key "linea visual previa"))

  (general-define-key
   :states '(normal)
   :infix "g"
   "h" '(evil-beginning-of-line :which-key "evil-beginning-of-line")
   "G" '(end-of-buffer :which-key "end-of-buffer")
   "j" '(evil-next-line :which-key "evil-next-linex")
   "k" '(evil-previous-line :which-key "evil-previous-line")
   "l" '(evil-end-of-line :which-key "evil-end-of-line"))
#+end_src

****** Olivetti
[[https://github.com/rnkn/olivetti][=olivetti=]] es un /minor mode/ que ofrece una mejor experiencia de edición y lectura de texto al reducir el ancho del texto y centrarlo en la ventana. En esta sección se hace la instalación y configuración por defecto del paquete, pero en otros paquetes (e.g. [[Elfeed]]) se puede activar por defecto (en ciertos modos) o se agregan configuraciones locales.

#+begin_src emacs-lisp 
  (use-package olivetti
    :custom
    (olivetti-body-width 80 "Tamaño (en número de carateres) del texto")
    :commands 
    (olivetti-mode))
#+end_src

***** Revisión ortográfica
Emacs permite hace revisión ortográfica desde cualquier modo. Esto resulta indispensable para escribir documentos, correos electrónicos, o archivos orgmode exportables.

Existen dos modos para esto; ispell y flyspell. Ispell permite revisión ortográfica por demanda, mientras que flyspell permite revisión ortográfica a medida que se teclea[fn:1]. Por obvias razones, la mejor opción es flyspell.

Los motores normales para hacer la revisión son aspell y hunspell. Hunspell es el más popular[fn:2], pero aspell tiene mejor desempeño (por lo menos con diccionarios en inglés)[fn:3]. Una de las razones para que hunspell sea más popular es que aspell no tenía mantenimiento desde 2011, pero el desarrollo continuó en 2019 y ahora está en versión 60.8[fn:4]. Por estas razones, se decide usar aspell en linux o wsl. Hunspell debe usarse en windows (nativo) porque aspell revienta a emacs en documentos latex.

****** Instalación de aspell
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
aspell
aspellDicts.en
aspellDicts.es
#+end_src

Para reconocimiento de los diccionarios en NixOS (luego de actualización a 21.11), se debe configurar la carpeta de datos de ~aspell~ en el archivo ~~/.aspell.conf~
 
#+begin_src conf :tangle ~/.aspell.conf
data-dir /run/current-system/sw/lib/aspell
#+end_src

****** Configuración de emacs
******* Para aspell
#+begin_src emacs-lisp 
  (use-package ispell
    :custom 
    (ispell-aspell-data-dir "/run/current-system/sw/lib/aspell") 
    (ispell-aspell-dict-dir "/run/current-system/sw/lib/aspell") 
    (ispell-dictionary "es" "Diccionario en español por defecto")
    :hook
    (text-mode . flyspell-mode))
#+end_src

******* Para hunspell
Se debe agregar lo siguiente en .emacs

#+begin_src :tangle no
(setq ispell-program-name "c:/msys64/mingw64/bin/hunspell.exe")
#+end_src

Nótece que la ruta a aspell debe ser consistente con el resultado de =which hunspell= en MSys2 luego de la instalación.

Para agregar diccionarios y definir español como diccionario por defecto, se agrega lo siguiente en .emacs:

#+begin_src emacs-lisp :tangle no
(setq ispell-local-dictionary-alist
'(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
("en_GB" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_GB") nil utf-8)
("es_CO" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "es") nil utf-8)))
(setq ispell-dictionary "es")
#+end_src 

Nótece que hay que tener los diccionarios instalados. De lo contrario, la inicialización falla.

***** =org=
#+begin_src emacs-lisp :noweb no-export
  (use-package org
    :commands (org-capture org-agenda)
    :hook
    <<org-hook>>
    :custom
    <<org-custom>>
    :config
    <<org-config>>
    :general
    <<org-general>>)
#+end_src

****** Configuración básica
#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-startup-folded t)          ; Colapsar contenido al abrir un archivo
  (org-startup-align-all-table t) ; Empezar con las tablas colapsadas
  (org-startup-indented t)        ; Activar org-indent-mode por defecto 
  (org-tags-column 0)             ; Quitar espacio entre título y etiquetas
  (org-list-allow-alphabetical t) ; Permitir listas con letras
  (org-table-header-line-p t)     ; Congelar primera fila de tablas largas
  (org-confirm-babel-evaluate nil); No pedir confirmación para ejecutar código desde babel
#+end_src

****** Configuración de estados, prioridades y etiquetas de tareas
#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-todo-keywords '((sequence "TODO(t)"
                                 "ESPE(e)"
                                 "EMPE(m)"
                                 "PROY(p)"
                                 "FUTU(f)"
                                 "|" "DONE(d)"
                                 "CANC(c)")))
  (org-todo-keyword-faces '(("PROY" . (:foreground "#d33682" :weight bold))
                            ("ESPE" . (:foreground "#b58900" :weight bold))
                            ("EMPE" . (:foreground "#b58900" :weight bold))
                            ("DONE" . (:foreground "#859900" :weight bold))
                            ("CANC" . (:foreground "#859900" :weight bold))
                            ("FUTU" . (:foreground "#2aa198" :weight bold))
                            ("TODO" . (:foreground "#6c71c4" :weight bold))))

  (org-priority-highest ?A)
  (org-priority-default ?D)
  (org-priority-lowest ?D)
  (org-priority-faces '((?A . (:foreground "#dc322f" :weight bold))
                        (?B . (:foreground "#b58900" :weight bold))
                        (?C . (:foreground "#2aa198"))
                        (?D . (:foreground "#859900"))))


  (org-tag-persistent-alist '(("@Casa" . ?c)
                              ("@Oficina" . ?o)
                              ("@PC" . ?p)
                              ("@Internet" . ?i)
                              ("@Lectura" . ?l)
                              ("@Calle" . ?k)
                              ("@Video" . ?v)
                              ("#Docencia" . ?d)
                              ("#Carrera" . ?u)
                              ("#DevP" . ?e)
                              ("#ProyPer" . ?y)
                              ("#IngresoAdicional" . ?s)
                              ("#Puntos" . ?n)
                              ("PasarBalon" . ?b)))
#+end_src

****** Bitácora de tareas repetidas
Cada vez que marco como completada (o cancelada) una tarea con repetición, se guarda una línea de cambio de estado en el cuerpo de la tarea. Para que estas líneas de cambio de estado se guarden dentro de un /drawer/ (logrando tareas más limpias), se modifica el valor de la variable =org-log-into-drawer=. Esta variable acepta como parámetro el nombre del cajón en donde se quiere guardar las líneas de cambio de estado. También acepta =t=, usando LOGBOOK como nombre por defecto del cajón.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-log-into-drawer "BITÁCORA")
#+end_src

****** Seguir enlaces en la misma ventana
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (setf (alist-get 'file org-link-frame-setup) #'find-file)
#+end_src

****** Desactivar =electric-indent-mode= en =org=
#+begin_src emacs-lisp :tangle no :noweb-ref org-hook
  (org-mode . (lambda () (electric-indent-local-mode -1)))
#+end_src
  
****** dwim
La siguiente función dwim (do what I mean) se toma del [[https://github.com/hlissner/doom-emacs/blob/develop/modules/lang/org/autoload/org.el#L147][código de Doom]]. Se le modifica el nombre para conservar convención de nombramiento de funciones propias.

#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (defun j/dwim-at-point (&optional arg)
    "Do-what-I-mean at point.
  If on a:
  - checkbox list item or todo heading: toggle it.
  - clock: update its time.
  - headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in
    subtree; update statistics cookies/checkboxes and ToCs.
  - footnote reference: jump to the footnote's definition
  - footnote definition: jump to the first reference of this footnote
  - table-row or a TBLFM: recalculate the table's formulas
  - table-cell: clear it and go into insert mode. If this is a formula cell,
    recaluclate it instead.
  - babel-call: execute the source block
  - statistics-cookie: update it.
  - latex fragment: toggle it.
  - link: follow it
  - otherwise, refresh all inline images in current tree."
    (interactive "P")
    (let* ((context (org-element-context))
           (type (org-element-type context)))
      ;; skip over unimportant contexts
      (while (and context (memq type '(verbatim code bold italic underline strike-through subscript superscript)))
        (setq context (org-element-property :parent context)
              type (org-element-type context)))
      (pcase type
        (`headline
         (cond ((memq (bound-and-true-p org-goto-map)
                      (current-active-maps))
                (org-goto-ret))
               ((and (fboundp 'toc-org-insert-toc)
                     (member "TOC" (org-get-tags)))
                (toc-org-insert-toc)
                (message "Updating table of contents"))
               ((string= "ARCHIVE" (car-safe (org-get-tags)))
                (org-force-cycle-archived))
               ((or (org-element-property :todo-type context)
                    (org-element-property :scheduled context))
                (org-todo
                 (if (eq (org-element-property :todo-type context) 'done)
                     (or (car (+org-get-todo-keywords-for (org-element-property :todo-keyword context)))
                         'todo)
                   'done))))
         ;; Update any metadata or inline previews in this subtree
         (org-update-checkbox-count)
         (org-update-parent-todo-statistics)
         (when (and (fboundp 'toc-org-insert-toc)
                    (member "TOC" (org-get-tags)))
           (toc-org-insert-toc)
           (message "Updating table of contents"))
         (let* ((beg (if (org-before-first-heading-p)
                         (line-beginning-position)
                       (save-excursion (org-back-to-heading) (point))))
                (end (if (org-before-first-heading-p)
                         (line-end-position)
                       (save-excursion (org-end-of-subtree) (point))))
                (overlays (ignore-errors (overlays-in beg end)))
                (latex-overlays
                 (cl-find-if (lambda (o) (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay))
                             overlays))
                (image-overlays
                 (cl-find-if (lambda (o) (overlay-get o 'org-image-overlay))
                             overlays)))
           (+org--toggle-inline-images-in-subtree beg end)
           (if (or image-overlays latex-overlays)
               (org-clear-latex-preview beg end)
             (org--latex-preview-region beg end))))

        (`clock (org-clock-update-time-maybe))

        (`footnote-reference
         (org-footnote-goto-definition (org-element-property :label context)))

        (`footnote-definition
         (org-footnote-goto-previous-reference (org-element-property :label context)))

        ((or `planning `timestamp)
         (org-follow-timestamp-link))

        ((or `table `table-row)
         (if (org-at-TBLFM-p)
             (org-table-calc-current-TBLFM)
           (ignore-errors
             (save-excursion
               (goto-char (org-element-property :contents-begin context))
               (org-call-with-arg 'org-table-recalculate (or arg t))))))

        (`table-cell
         (org-table-blank-field)
         (org-table-recalculate arg)
         (when (and (string-empty-p (string-trim (org-table-get-field)))
                    (bound-and-true-p evil-local-mode))
           (evil-change-state 'insert)))

        (`babel-call
         (org-babel-lob-execute-maybe))

        (`statistics-cookie
         (save-excursion (org-update-statistics-cookies arg)))

        ((or `src-block `inline-src-block)
         (org-babel-execute-src-block arg))

        ((or `latex-fragment `latex-environment)
         (org-latex-preview arg))

        (`link
         (let* ((lineage (org-element-lineage context '(link) t))
                (path (org-element-property :path lineage)))
           (if (or (equal (org-element-property :type lineage) "img")
                   (and path (image-type-from-file-name path)))
               (+org--toggle-inline-images-in-subtree
                (org-element-property :begin lineage)
                (org-element-property :end lineage))
             (org-open-at-point arg))))

        ((guard (org-element-property :checkbox (org-element-lineage context '(item) t)))
         (let ((match (and (org-at-item-checkbox-p) (match-string 1))))
           (org-toggle-checkbox (if (equal match "[ ]") '(16)))))

        (_
         (if (or (org-in-regexp org-ts-regexp-both nil t)
                 (org-in-regexp org-tsr-regexp-both nil  t)
                 (org-in-regexp org-link-any-re nil t))
             (call-interactively #'org-open-at-point)
           (+org--toggle-inline-images-in-subtree
            (org-element-property :begin context)
            (org-element-property :end context)))))))

  (defun +org--toggle-inline-images-in-subtree (&optional beg end refresh)
    "Refresh inline image previews in the current heading/tree."
    (let ((beg (or beg
                   (if (org-before-first-heading-p)
                       (line-beginning-position)
                     (save-excursion (org-back-to-heading) (point)))))
          (end (or end
                   (if (org-before-first-heading-p)
                       (line-end-position)
                     (save-excursion (org-end-of-subtree) (point)))))
          (overlays (cl-remove-if-not (lambda (ov) (overlay-get ov 'org-image-overlay))
                                      (ignore-errors (overlays-in beg end)))))
      (dolist (ov overlays nil)
        (delete-overlay ov)
        (setq org-inline-image-overlays (delete ov org-inline-image-overlays)))
      (when (or refresh (not overlays))
        (org-display-inline-images t t beg end)
        t)))

  (defun +org-get-todo-keywords-for (&optional keyword)
    "Returns the list of todo keywords that KEYWORD belongs to."
    (when keyword
      (cl-loop for (type . keyword-spec)
               in (cl-remove-if-not #'listp org-todo-keywords)
               for keywords =
               (mapcar (lambda (x) (if (string-match "^\\([^(]+\\)(" x)
                                       (match-string 1 x)
                                     x))
                       keyword-spec)
               if (eq type 'sequence)
               if (member keyword keywords)
               return keywords)))
#+end_src
   
****** Actualización automática de tareas FUTU
Esta sección define una serie de funciones para usar tareas con estado =FUTU=. Estas son tareas que no aparecen como accionables, pero que se vuelven accionables en una fecha específica. Se usan para tareas que se quieren registrar con anticipación, pero que sólo se puede empezar luego de una fecha específica. 

La función =j/org-set-futu= se usa para asignar el estado =FUTU= a una tarea, preguntando antes cuál es la fecha en la que se convierte en accionable. La función =j/org-verify-actionable-tasks= revisa todas las tareas de archivos registrados como en =org-agenda-files= y, si encuentra tareas con estado =FUTU= y una fecha igual o menor a la actual en la propiedad =ACTIONABLE=, las pasa a estado =TODO= y les quita la propiedad =ACTIONABLE=.
   
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (defun j/org-evaluate-if-actionable ()
    "Returns t if the task at point is actionable or nil if it isn't"
    (and (org-entry-get (point) "ACTIONABLE")
         (string< (org-read-date nil nil (org-entry-get (point) "ACTIONABLE"))
                  (org-read-date nil nil "+1"))))

  (defun j/org-process-task ()
    "Vefifies if a task is actionable. If it is, set it as actionable"
    (when (j/org-evaluate-if-actionable)
      (org-todo "TODO")
      (org-delete-property "ACTIONABLE")))

  (defun j/org-verify-actionable-tasks ()
    "Goes through al agenda files checking if FUTU tasks are actionable"
    (org-map-entries '(j/org-process-task)
                     "/+FUTU" 'agenda))

  (defun j/org-actionable ()
    (j/org-verify-actionable-tasks))

  (defun j/org-set-futu ()
    "Cambiar el estado de una tarea a FUTU y definir la fecha en que se convierte en accionable"
    (interactive)
    (org-set-property "ACTIONABLE" (concat "[" (org-read-date nil nil nil "ACTIONABLE: ") "]"))
    (org-todo "FUTU"))
#+end_src

Ahora se agrega un hook para ejecutar =j/org-actionable= antes de cada ejecución de la agenda:
#+begin_src emacs-lisp :noweb-ref org-hook :tangle no
  (org-agenda-mode . j/org-actionable)
#+end_src

****** =org-superstar-mode=
=org-superstar= es un paquete que mejora el aspecto visual de archivos =org=.  

#+begin_src emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode))
#+end_src

****** Exportación a latex
******* TODO Cadena para compilación de latex
Uso ~tectonic~ como distribución de latex en (ambientes linux).

UPDATE: Luego de actualización a tectonic 8 en NixOS, biber dejó de funcionar (borra el archivo de biblatex...), así que tocó volver a TexLive. Ojalá en un futuro pueda volver a a revisar ~tectonic~.

#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-latex-pdf-process
   '("%latex -interaction nonstopmode -output-directory %o %f"
     "biber %b"
     "%latex -interaction nonstopmode -output-directory %o %f"
     "%latex -interaction nonstopmode -output-directory %o %f"))
#+end_src

******* Preferir /labels/ de usuario
Esto se hace para que, al exportar latex, no se generen /labels/ aleatorios para las secciones sino que se usen los que estén en propiedades de las secciones (si existen).
#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-latex-prefer-user-labels t)
#+end_src

******* Beamer
Por defecto, =ox-latex= exporta =*asdf*= a texto de alerta en beamer. Para que se exporte como texto en negrilla se debe agregar un filtro de exportación a org-export.
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (defun my-beamer-bold (contents backend info)
    (when (eq backend 'beamer) ;;
      (replace-regexp-in-string "\\`\\\\[A-Za-z0-9]+" "\\\\textbf" contents)))
  ;;(add-to-list 'org-export-filter-bold-functions 'my-beamer-bold)
#+end_src

Activar =org-beamer-mode= por defecto para que esté disponible en el /dispacher/ de /org export/:
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (org-beamer-mode)
#+end_src

******* Configuración para exportar a cartas
#+begin_src emacs-lisp :noweb-ref org-config :tangle no
  (add-to-list 'org-latex-classes
               '("letter"
                 "\\documentclass{letter}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
#+end_src

******* Eliminación de archivos intermedios
Además a los ya presentes en ~org-latex-logfiles-extensions~, se agrega la extensión ~bbl~ para que también elimine ese archivo intermedio después de exportar.

#+begin_src emacs-lisp :noweb-ref org-config :tangle no
  (add-to-list 'org-latex-logfiles-extensions "bbl")
#+end_src

******* Uso correcto de comillas
Lo primero que se debe hacer es habilitar la función de /smart quotes/ para la exportación a latex:
#+begin_src emacs-lisp :noweb-ref org-custom :tangle no
  (org-export-with-smart-quotes t)
#+end_src

Luego se debe configurar la lista de /smart quotes/ para que se usen correctamente:
#+begin_src emacs-lisp :noweb-ref org-custom :tangle no
  (org-export-smart-quotes-alist 
   '(("en" 
      (primary-opening   :utf-8 "“" :html "&ldquo;" :latex "``" :texinfo "``")
      (primary-closing   :utf-8 "”" :html "&rdquo;" :latex "''" :texinfo "''")
      (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`")
      (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'")
      (apostrophe        :utf-8 "’" :html "&rsquo;"))
     ("es" 
      (primary-opening   :utf-8 "“" :html "&ldquo;" :latex "``" :texinfo "``")
      (primary-closing   :utf-8 "”" :html "&rdquo;" :latex "''" :texinfo "''")
      (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`")
      (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'")
      (apostrophe        :utf-8 "’" :html "&rsquo;"))))
#+end_src

****** Configuración de agenda
******* Definición de archivos de agenda
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (add-to-list 'org-agenda-files "~/personal/orgmode/gtd.org")
#+end_src

******* Mostrar la agenda en la ventana actual
#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-agenda-window-setup 'current-window)
#+end_src

******* Excluir tareas completas de vista de agenda
#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-deadline-if-done t)
#+end_src

******* Mostrar niveles superiores (segun arbol de org) en las búsquedas generales de la agenda
#+begin_src emacs-lisp :noweb-ref org-config :tangle no
  (with-eval-after-load 'org-agenda 
    (add-to-list 'org-agenda-prefix-format '(agenda . " %i %-12:c%?-12t% s %b"))
    (add-to-list 'org-agenda-prefix-format '(todo . " %i %-12:c %b")))
#+end_src

******* ~org-super-agenda~
[[https://github.com/alphapapa/org-super-agenda][org-super-agenda]] permite crear agendas personalizadas muy fácilmente. La construcción de estas agendas con ~org-agenda-custom-commands~ no es complicada, pero le faltan funcionalidades para filtrar por tiempo estimado. Esto último es lo único que uso de ~org-super-agenda~, como se puede ver en [[Agendas personalizadas]].

#+begin_src emacs-lisp :noweb no-export
  (use-package org-super-agenda    
    :after org-agenda
    :config
    <<org-super-agenda-config>>
    :hook (org-agenda-mode . org-super-agenda-mode))
#+end_src

También es importante deshabilitar =org-super-agenda-map= para evitar bindings por defecto en encabezados de =org-super-agenda=. En particular, si no se deshabilita esto, no se pueden usar los bindigs para movimiento de evil en encabezados de =org-super-agenda=.

#+begin_src emacs-lisp :noweb-ref org-super-agenda-config :tangle no
  (setq org-super-agenda-header-map (make-sparse-keymap))
#+end_src

******* Agendas personalizadas
#+begin_src emacs-lisp :noweb-ref org-custom :tangle no
  (org-agenda-custom-commands
   '(("n"
      "Agenda general"
      ((tags-todo "+PRIORITY=\"A\""
                  ((org-agenda-overriding-header "Prioridad ‼️")
                   (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("FUTU")))
                   (org-agenda-block-separator nil)))
       (todo "ESPE"
             ((org-agenda-overriding-header "\nTareas en seguimiento 🤌🏽")
              (org-agenda-block-separator nil)))
       (todo "EMPE"
             ((org-agenda-overriding-header "\nTareas empezadas")
              (org-agenda-block-separator nil)))
       (agenda ""
               ((org-agenda-overriding-header "\nPróximos 3 días")
                (org-agenda-block-separator nil)
                (org-deadline-warning-days 0)
                (org-agenda-start-on-weekday nil)
                (org-agenda-span 3)))
       (agenda ""
               ((org-agenda-overriding-header "\nSiguientes 14 días")
                (org-agenda-start-day "+3d")
                (org-agenda-start-on-weekday nil)
                (org-agenda-block-separator nil)
                (org-deadline-warning-days 0)
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("FUTU")))
                (org-agenda-span 14)))
       (todo "TODO"
             ((org-agenda-overriding-header "\nCortas")
              (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("FUTU" "PROY")))
              (org-agenda-block-separator nil)
              (org-super-agenda-groups '(( :name none
                                           :effort< "30")
                                         (:discard (:anything))))
              (org-agenda-block-separator nil)))
       (tags-todo "-PRIORITY=\"A\""
                  ((org-agenda-overriding-header "\nEl resto")
                   (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("FUTU" "PROY" "EMPE" "ESPE")))
                   (org-agenda-block-separator nil)
                   (org-super-agenda-groups '(( :name none
                                                :effort> "31")
                                              (:discard (:anything))))
                   (org-agenda-block-separator nil)))))))
#+end_src

****** =org-ref=
=org-ref= permite usar referencias bibliográficas en formato bibtex desde =org=.

#+begin_src emacs-lisp :noweb no-export
  (use-package org-ref
    :after org
    :custom
    <<org-ref-custom>>
    :config
    <<org-ref-config>>)
#+end_src

******* Configuración básica
#+begin_src emacs-lisp :tangle no :noweb-ref org-ref-custom
  (org-ref-default-citation-link "parencite")
  (bibtex-completion-bibliography '("~/biblioteca/main.bib"))
  (bibtex-completion-library-path "~/biblioteca/")
  (bibtex-completion-notes-path "~/biblioteca/notas/")
  ;(org-ref-notes-function 'orb-edit-note)
  (bibtex-dialect 'biblatex)
#+end_src

******* Acordes relevantes
#+begin_src emacs-lisp :tangle no :noweb-ref org-ref-config
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps 'org-mode-map
    "}" '(org-ref-insert-ref-link :which-key "insertar referencia")
    "]" '(org-ref-insert-cite-link :which-key "insertar cita"))
#+end_src

******* Agregar /tooltip/ al ubicar cursor en referencia
#+begin_src emacs-lisp :tangle no :noweb-ref org-ref-config
(defun org-ref-link-message (&optional a1 a2 a3)
  (when (and (eq major-mode 'org-mode)
   (eq (get-text-property (point) 'help-echo) 'org-ref-cite-tooltip))
  (display-local-help)))

(advice-add 'right-char :after 'org-ref-link-message)
(advice-add 'left-char :after 'org-ref-link-message)
(advice-add 'evil-forward-char :after 'org-ref-link-message)
(advice-add 'evil-backward-char :after 'org-ref-link-message)
(advice-add 'evil-next-visual-line :after 'org-ref-link-message)
(advice-add 'evil-next-line :after 'org-ref-link-message)
(advice-add 'evil-previous-visual-line :after 'org-ref-link-message)
(advice-add 'evil-previous-line :after 'org-ref-link-message)
(advice-add 'previous-line :after 'org-ref-link-message)
(advice-add 'next-line :after 'org-ref-link-message)
#+end_src

******* =org-ref-prettify=
[[https://github.com/emacsmirror/org-ref-prettify][org-ref-prettify]] muestra la citas creadas con =org-ref= como si fueran formateadas en LaTex.

#+begin_src emacs-lisp :noweb no-export
  (use-package org-ref-prettify
    :after org-ref
    :hook (org-mode . org-ref-prettify-mode))
#+end_src

****** =org-refile=
Configuración necesaria para que org-refile tome en cuenta elementos hasta de nivel 4 en el archivo actual. 
#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  ;; Destinos hasta de nivel 3
  (org-refile-targets '((org-agenda-files :maxlevel . 3)))
  ;; Construcción del destino paso a paso
  (org-refile-use-outline-path 'file)
  (org-outline-path-complete-in-steps nil)
#+end_src
 
******* Acordes  
#+begin_src emacs-lisp :tangle no :noweb-ref org-custom
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps '(org-capture-mode-map)
    "r"   '(org-capture-refile :which-key "refile"))
#+end_src

****** =org-capture=
Uso =org-capture= para captura de tareas, ideas, y notas. Lo hago definiendo plantillas para diferentes elementos que quiero captura y ejecutándolos cuando sea necesario.
 
******* Plantillas
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  ;; Definir la lista DESPUÉS de cargar org-capture. Esto es necesario porque de no tenerlo la lista de plantillas se reiniciaba
  
  (with-eval-after-load 'org-capture       
    (add-to-list 'org-capture-templates
                 '("l" "Tarea enlazada" ; l para una terea que incluya enlace a documento o correo
                   entry
                   (file+headline
                    "~/personal/orgmode/gtd.org" ; Guardar en gtd.org
                    "Inbox") ; Guarda por defecto en el headline Inbox
                   "* TODO [#D] %?\nOrigen o referencia: %a\n"))
    (add-to-list 'org-capture-templates
                 '("c" "Tarea de clipboard" ; c para una tarea que referencia información contenida en clipboard
                   entry
                   (file+headline
                    "~/personal/orgmode/gtd.org" ; Guardar en gtd.org
                    "Inbox") ; Guarda por defecto en el headline Inbox
                   "* TODO [#D] %? \n %x"))
    (add-to-list 'org-capture-templates
                 '("t" "Tarea simple" ; l para una terea que incluya enlace a documento o correo
                   entry
                   (file+headline
                    "~/personal/orgmode/gtd.org" ; Guardar en gtd.org
                    "Inbox") ; Guarda por defecto en el headline Inbox
                   "* TODO [#D] %? \n")))
#+end_src

******* Acorde de acceso directo  
Esto acceso directo funciona desde cualquier modo
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (j/lider
    "c" '(org-capture :which-key "org-capture"))
#+end_src

******* Acordes para modo de captura
#+begin_src emacs-lisp :noweb-ref org-general :tangle no
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps '(org-capture-mode-map)
    "r" '(org-capture-refile :which-key "org-capture-refile"))
#+end_src

****** Hábitos
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (add-to-list 'org-modules 'org-habit)
#+end_src

****** Acordes locales
******* De movimiento
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (general-define-key
   :states '(normal)
   :keymaps '(org-mode-map)
   "K"   '(org-previous-visible-heading :which-key "Encabezado previo")
   "J"   '(org-next-visible-heading :which-key "Encabezado siguiente")
   "H"   '(outline-up-heading :which-key "Encabezado siguiente"))
#+end_src

******* De interacción con archivo
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (general-define-key
   :states '(normal)
   :keymaps '(org-mode-map)
   "RET" '(j/dwim-at-point :which-key "dwim"))
  
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps '(org-mode-map)
    "T"    '(org-babel-tangle :which-key "tangle"))
#+end_src

******* De operación sobre tareas o exportación
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps '(org-mode-map)
    "a"   '(org-archive-subtree-default :which-key "archivar")
    "p"   '(org-priority :which-key "prioridad")
    "q"   '(org-set-tags-command :which-key "etiquetas")
    "o"   '(org-set-property :which-key "propiedades")
    "t"   '(org-todo :which-key "propiedades")
    "r"   '(org-refile :which-key "refile")
    "e"   '(org-export-dispatch :which-key "exportar"))
#+end_src

******* De reloj 
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (j/lider-local
    :infix "j"
    :keymaps '(org-mode-map)
    "" '(:ignore t :which-key "reloj")
    "e" '(org-set-effort :which-key "definir esfuerzo")
    "E" '(org-inc-effort :which-key "aumentar esfuerzo")
    "i" '(org-clock-in :which-key "iniciar reloj")
    "I" '(org-clock-in-last :which-key "continuar reloj")
    "g" '(org-clock-goto :which-key "ir a actual")
    "c" '(org-clock-cancel :which-key "cancelar reloj")
    "o" '(org-clock-out :which-key "cerrar y eliminar"))
  
  ;; Manipulación del reloj desde menú de accesos directos 
  (j/lider
    :infix "o j"
    "" '(:ignore t :which-key "reloj")
    "I" '(org-clock-in-last :which-key "continuar reloj")
    "c" '(org-clock-cancel :which-key "cancelar reloj")
    "o" '(org-clock-out :which-key "cerrar y eliminar"))
#+end_src

******* De calendario
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (j/lider-local
    :infix "c"
    :keymaps '(org-mode-map)
    "" '(:ignore t :which-key "calendario")
    "d" '(org-deadline :which-key "definir deadline")
    "f" '(j/org-set-futu :which-key "Aa futuro")
    "t" '(org-time-stamp-inactive :which-key "time stamp")
    "c" '(org-schedule :which-key "agendar"))
#+end_src

******* De agenda
Lo primero que se tiene que hacer con la agenda es indicar que debe iniciar en modo NORMAL de =evil= para tener acceso a todos los acordes globales.

#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (add-to-list 'evil-normal-state-modes 'org-agenda-mode)
#+end_src

Ya con esto, se tienen que definir los acrodes locales para agenda.
#+begin_src emacs-lisp :tangle no :noweb-ref org-config
  (general-define-key
   :states '(normal)
   :keymaps '(org-agenda-mode-map)
   "q" '(org-agenda-quit :which-key "salir")
   "r" '(org-agenda-redo :which-key "refrescar")
   "t" '(org-agenda-todo :which-key "cambiar estado")
   "c" '(org-agenda-schedule :which-key "agendar")
   "a" '(org-agenda-archive :which-key "archivar")
   "d" '(org-agenda-deadline :which-key "fecha límite")
   "p" '(org-agenda-priority :which-key "cambiar prioridad")
   "i" '(org-agenda-clock-in :which-key "iniciar reloj")
   "o" '(org-agenda-clock-out :which-key "cerrar reloj")
   "G" '(org-save-all-org-buffers :which-key "guardar archivos org")
   "m" '(org-agenda-entry-text-mode :which-key "mostrar contenido")
   "RET" '(org-agenda-switch-to :which-key "visitar"))
#+end_src

******* De pie de página
#+begin_src emacs-lisp :noweb-ref org-general :tangle no
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps 'org-mode-map
    :infix "f"
    "" '(:ignore t :which-key "Pie de página")
    "f" '(org-footnote-new :which-key "agregar pie de página")
    "n" '(org-footnote-normalize :which-key "normalizar pie de página"))
#+end_src

******* De tabla
#+begin_src emacs-lisp :noweb-ref org-general :tangle no
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps 'org-mode-map
    :infix "b"
    "" '(:ignore t :which-key "tabla")
    "c" '(org-table-convert :which-key "convertir")
    "TAB" '(org-table-shrink :which-key "colapsar")
    "r" '(org-table-field-info :which-key "información de posición") 
    "b" '(org-table-eval-formula :which-key "editar fórmula") 
    "e" '(org-edit-special :which-key "org-edit-special"))
#+end_src

******* De enlace
#+begin_src emacs-lisp :noweb-ref org-general :tangle no
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps 'org-mode-map
    :infix "l"
    "" '(:ignore t :which-key "enlaces")
    "l" '(org-insert-link :which-key "crear enlace")
    "s" '(org-open-at-point :which-key "segir enlace"))
#+end_src

******* De edición y manupulación
#+begin_src emacs-lisp :noweb-ref org-general :tangle no
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps 'org-mode-map
    :infix "E"
    "" '(:ignore t :which-key "edición")
    "o" '(org-sort :which-key "ordenar"))
#+end_src

****** =org-ql=
#+begin_src emacs-lisp
  (use-package org-ql
    :after org)
#+end_src

****** =org-reveal=
[[https://github.com/yjwen/org-reveal][org-reveal]] es un paquete que permite exportar un archivo de org-mode como una presentación de [[https://revealjs.com/][reveal.js]].

#+begin_src emacs-lisp 
  (use-package ox-reveal
    :config)
#+end_src

****** =org-re-reveal=
#+begin_src emacs-lisp 
  (use-package org-re-reveal
    :config)
  
  (use-package org-re-reveal-ref
    :config)
  #+end_src

****** =org-noter=
#+begin_src emacs-lisp 
  (use-package org-noter)
#+end_src

****** Tablas
******* Referencias remotas por ruta de archivo
~org~ permite referenciar tablas remotas en otros archivos a través de IDs. Sin embargo, la siguiente función permite hacer lo mismo pero con la ruta del archivo:

#+begin_src emacs-lisp :tangle no :noweb-ref org-config
(defun j/remote-table-range (path name range)
  (with-current-buffer (find-file-noselect path)
    (org-table-get-remote-range name range)))
#+end_src

Se puede usar de la siguiente forma:
#+name: nombreDeEstaTabla
| H1 | H2 |
|    |    |
#+tblfm: @1$1='(j/remote-table-range "./ruta/absoluta/o/relativa.org" "nombreDeLaOtraTabla" (string ?@ ?1 ?$ ?1))

Esto espera una tabla con el tabla con el tag ~#+name: nombreDeLaOtraTabla~ en el archivo especificado.

La razón de usar la función ~string~ para la referencia de la tabla remota se encuentra en https://stackoverflow.com/questions/13673987/org-mode-spreadsheet-programmatic-remote-references. El problema es que si se usa "@1$1" directamente, lo primero que hace ~org~ al evaluar la fórmula es reemplazar estas referencias, por lo que lo reemplazará con el valor de esa referencia pero en la tabla actual.

***** =yasnippet=
Yasnippet es un paquete que permite la definición de /snippets/ (o plantillas) y su utilización en diferentes modos. Por defecto, no trae plantillas definidas; si se quieren plantillas, se debe agregar el paquete =yasnippet-snippets= que trae una colección de plantillas predefinidas para modos populares.

#+begin_src emacs-lisp :noweb no-export
  (use-package yasnippet
    :after (evil general)
    :diminish yas-minor-mode
    :config
    <<yasnippet-config>>)
  
  (use-package yasnippet-snippets
    :after yasnippet
    :config (yasnippet-snippets-initialize)) 
#+end_src

La definición de plantillas se hace a partir de un archivo de texto plano que se guarda en =.emacs.d/snippets/<mode>/=. 

****** Inicializar yasnippet para todos los modos
#+begin_src emacs-lisp :tangle no :noweb-ref yasnippet-config
  (yas-global-mode)
  (yas-reload-all)
#+end_src

****** Acordes relevantes
#+begin_src emacs-lisp :tangle no :noweb-ref yasnippet-config
  (j/lider
    "y" '(yas-insert-snippet :which-key "insertar plantilla"))
#+end_src

***** TODO =dired=
Esta sección contiene la configuración de Dired. Al ser un paquete incluido en emacs, es necesario incluir la línea =:straight (:type built-in)= para que =use-package= lo pueda encontrar (esto es necesario por la integración de =use-package= con =straight=)
   
#+begin_src emacs-lisp :noweb no-export
  (use-package dired
    :straight (:type built-in)
    :commands (dired dired-jump)
    :custom
    <<dired-custom>>
    :config
    <<dired-config>>)
#+end_src

****** Evitar apertura de múltiples /buffers/ con RET
Por defecto, =dired= crea un nuevo /buffer/ cada vez que se da =RET= en una carpeta. Si no se quiere abrir tantos /buffers/, una opción es usar =dired-find-alternate-file= (mapeado por defecto a =a=) en lugar de =dired-find-file= (mapeado por defecto a =RET=). Sin embargo, esta función está deshabilitada porque los usuarios la encontraban confusa. Para habilitarla por defecto y evitar el diálogo de confirmación se debe ejecutar:

#+begin_src emacs-lisp :tangle no :noweb-ref dired-config
  (put 'dired-find-alternate-file 'disabled nil)
#+end_src
  
****** all-the-icons-dired
Este paquete agrega íconos a los archivos mostrados en =dired=

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :after dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

****** No pedir confirmación en operaciones recursivas
#+begin_src emacs-lisp :tangle no :noweb-ref dired-custom
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'always)
#+end_src

***** =magit=
Magit es el mejor cliente git no solo para emacs sino en general. Funciona desde emacs apoyado en el cliente git estándar para el sistema operativo en donde se esté corriendo emacs.
  
#+begin_src emacs-lisp :noweb no-export
  (use-package magit
    :commands (magit-status magit-init magit-clone)
    :init
    <<magit-init>>) 
#+end_src

****** Comando de acceso directo 
#+begin_src emacs-lisp :tangle no :noweb-ref magit-init
  (j/lider
    :infix "o"
    "M" '(magit-status :which-key "magit"))
#+end_src

***** =projectile=
=projectile= es una librería de interacción con proyectos para Emacs. Lo uso para tener acceso rápido a archivos de proyectos y para facilitar tareas sobre proyectos como exportaciones, ejecuciones, etc.

#+begin_src emacs-lisp
  (use-package projectile
    :custom
    (projectile-enable-caching t)                   ; Para acelerar 
    (projectile-globally-ignored-files '("*.org~"))
    (projectile-completion-system 'ivy) 
  
    :config
    (projectile-mode)
    (setq projectile-enable-caching t))
  
  (use-package counsel-projectile
    :after projectile
    :config
    (counsel-projectile-mode))
#+end_src

****** Acordes
#+begin_src emacs-lisp
  (j/lider
    "p" '(:keymap projectile-command-map :which-key "projectile"))
#+end_src

***** =pdf-tools=
=pdf-tools= es un paquete para visualización y manipulación de archivos pdfs directamente en emacs.

#+begin_src emacs-lisp 
  (use-package pdf-tools
    :mode
    ("\\.pdf\\'" . pdf-view-mode)

    :config
    (pdf-tools-install))
#+end_src

***** =pocket-reader=
=[[https://github.com/alphapapa/pocket-reader.el][pocket-reader]]= es una interfaz para lectura de artículo guardados en [[http://www.getpocket.com][Pocket]].

Luego de la instalación inicial, hay que correr la función =pocket-reader= para seguir el proceso de autenticación en Pocket.

#+begin_src emacs-lisp :noweb no-export
  (use-package pocket-reader
    :commands pocket-reader
    :general
    <<pocket-reader-general>>)
#+end_src

****** Acordes
#+begin_src emacs-lisp :tangle no :noweb-ref pocket-reader-general
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps 'pocket-reader-mode-map
    "r" '(pocket-reader-refresh :which-key "refrescar")
    "h" '(pocket-reader-open-in-external-browser :which-key "ver en navegador"))
  
  (general-define-key
   :states '(normal insert emacs)
   :keymaps 'pocket-reader-mode-map
   "RET" '(pocket-reader-open-url :which-key "ver entrada"))
#+end_src

***** =kmacro=
=kmacro= ya viene de base en emacs. Lo único que hay que configurar son los acordes.

#+begin_src emacs-lisp 
  (use-package kmacro 
    :general
    (j/lider
      :infix "k"
      "" '(:ignore t :which-key "kmacro")
      "g" '(kmacro-start-macro :which-key "grabar")
      "d" '(kmacro-end-macro :which-key "detener grabación")
      "c" '(kmacro-insert-counter :which-key "insertar contador")
      "e" '(kmacro-set-counter :which-key "establecer contador")
      "s" '(kmacro-add-counter :which-key "adicionar a contador")
      "k" '(kmacro-call-macro :which-key "ejecutar macro")))
#+end_src

***** TODO Correo electrónico
(Falta un mantenimiento general a esta configuración) 
****** [[https://www.djcbsoftware.nl/code/mu/][Mu]] y [[http://isync.sourceforge.net/][isync]]
=mbsync= (parte de =isync=) es la aplicación que uso para descargar correo, y =mu= se usa para indexar el correo. 

Se instala =mu= desde canal unstable por que a la fecha ([2021-08-20 Fri]) no se tiene versión 1.6+ en canal estable.

#+begin_src nix :tangle no :noweb-ref nixos-paquetes
isync
unstable.mu
#+end_src

******* Configuración de mbsync
******** Generación de =.mbsyncrc=
#+begin_src dotfile :tangle ~/.mbsyncrc :noweb no-export
# mbsyncrc basado en 
# https://ryanwhittingham.com/using-multiple-email-accounts-with-mu4e/
# https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/

# ========================================================================
# Gmail personal
# ========================================================================
IMAPAccount gmail-jee
# Address to connect to
Host imap.gmail.com
User <<secreto("gmail-jee", "user")>>
PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/.config/emacs/.mbsyncpass-jee.gpg"
AuthMechs PLAIN
SSLType IMAPS
SSLVersions TLsv1.3
CertificateFile /etc/ssl/certs/ca-certificates.crt

# THEN WE SPECIFY THE LOCAL AND REMOTE STORAGE
# - THE REMOTE STORAGE IS WHERE WE GET THE MAIL FROM (E.G., THE
#   SPECIFICATION OF AN IMAP ACCOUNT)
# - THE LOCAL STORAGE IS WHERE WE STORE THE EMAIL ON OUR COMPUTER

# REMOTE STORAGE (USE THE IMAP ACCOUNT SPECIFIED ABOVE)
IMAPStore gmail-jee-remote
Account gmail-jee

# LOCAL STORAGE (CREATE DIRECTORIES with mkdir -p Maildir/gmail)
MaildirStore gmail-jee-local
Path ~/mbsync/gmail-jee/
Inbox ~/mbsync/gmail-jee/INBOX

# CONNECTIONS SPECIFY LINKS BETWEEN REMOTE AND LOCAL FOLDERS
#
# CONNECTIONS ARE SPECIFIED USING PATTERNS, WHICH MATCH REMOTE MAIl
# FOLDERS. SOME COMMONLY USED PATTERS INCLUDE:
#
# 1 "*" TO MATCH EVERYTHING
# 2 "!DIR" TO EXCLUDE "DIR"
# 3 "DIR" TO MATCH DIR

Channel gmail-jee-inbox
Master :gmail-jee-remote:
Slave :gmail-jee-local:
Patterns "INBOX"
Create Both
Expunge Both
SyncState *

Channel gmail-jee-trash
Master :gmail-jee-remote:"[Gmail]/Papelera"
Slave :gmail-jee-local:"[Gmail].Trash"
Create Both
Expunge Both
SyncState *

Channel gmail-jee-sent
Master :gmail-jee-remote:"[Gmail]/Enviados"
Slave :gmail-jee-local:"[Gmail].Sent Mail"
Create Both
Expunge Both
SyncState *

Channel gmail-jee-all
Master :gmail-jee-remote:"[Gmail]/Todos"
Slave :gmail-jee-local:"[Gmail].All Mail"
Create Both
Expunge Both
SyncState *

Channel gmail-jee-starred
Master :gmail-jee-remote:"[Gmail]/Destacados"
Slave :gmail-jee-local:"[Gmail].Starred"
Create Both
Expunge Both
SyncState *

# GROUPS PUT TOGETHER CHANNELS, SO THAT WE CAN INVOKE
# MBSYNC ON A GROUP TO SYNC ALL CHANNELS
#
# FOR INSTANCE: "mbsync gmail-jee" GETS MAIL FROM
# "gmail-jee-inbox", "gmail-jee-sent", and "gmail-jee-trash"
#
Group gmail-jee
Channel gmail-jee-inbox
Channel gmail-jee-sent
Channel gmail-jee-trash
Channel gmail-jee-all
Channel gmail-jee-starred

# =======================================================================
# Outlook Javeriana
# =======================================================================
IMAPAccount puj
Host outlook.office365.com
Port 993
User <<secreto("puj", "user")>>
PassCmd "gpg2 -q --for-your-eyes-only --no-tty -d ~/.config/emacs/.mbsyncpass-puj.gpg"
AuthMechs PLAIN
SSLType IMAPS
SSLVersions TLSv1.2

IMAPStore puj-remote
Account puj

MaildirStore puj-local
SubFolders Verbatim 
Path ~/mbsync/puj/
Inbox ~/mbsync/puj/INBOX/

Channel puj
Master :puj-remote:
Slave :puj-local:
Patterns "INBOX" "*"
Create Slave
Sync All
Expunge Both
SyncState *
MaxMessages 5000
#+end_src
******** Script para generación de llaves y creación de carpetas
#+begin_src sh :tangle ./inicio-correo.sh :noweb no-export
  # Crear ~/.emacs.d/.mbsyncpass-jee.gpg de forma interactiva
  echo "Ingrese la contraseña para cuenta de gmail"
  echo "Recuerde que para esto debe crearse una contraseña de aplicación. No usar contraseña maestra"
  read contraG
  echo $contraG>.mbsyncpass-jee
  gpg2 --output .mbsyncpass-jee.gpg --symmetric .mbsyncpass-jee
  rm .mbsyncpass-jee
  mv .mbsyncpass-jee.gpg ~/.config/emacs
  # Crear ~/.emacs.d/.mbsyncpass-jee.gpg de forma interactiva
  echo "Ingrese la contraseña para cuenta de PUJ"
  read contra
  echo $contra>.mbsyncpass-puj
  gpg2 --output .mbsyncpass-puj.gpg --symmetric .mbsyncpass-puj
  rm .mbsyncpass-puj
  mv .mbsyncpass-puj.gpg ~/.config/emacs

  # Crear archivo ~/.authinfo.gpg para envío de correo
  # TODO
  echo "machine smtp.office365.com login <<secreto("puj", "user")>> port 587 password $contra">~/.authinfo
  echo "machine outlook.office365.com login <<secreto("puj", "user")>> port 993 password $contra">>~/.authinfo
  echo "machine outlook.office365.com:443 login <<secreto("puj", "user")>> password $contra">>~/.authinfo
  echo "machine smtp.gmail.com login <<secreto("gmail-jee", "user")>> port 587 password $contraG">>~/.authinfo
  gpg2 --output ~/.authinfo.gpg --symmetric ~/.authinfo
  rm ~/.authinfo

  # Creación de carpetas para mbsync
  mkdir -p ~/mbsync/gmail-jee
  mkdir -p ~/mbsync/puj 
  # Correr por primera vez e indexar
  # mbsync -c ~/.mbsyncrc -a
  # mu init --maildir=~/mbsync --my-address=<<secreto("puj", "user")>> --my-address=<<secreto("gmail-jee", "user")>>
  # mu index
#+end_src

****** Configuración de =mu4e=
Lo primero es agregar mu4e al load-path de emacs. Dado que esto se hace distinto de acuerdo a la distribución que estemos usando, se hace de acuerdo al nombre del host.

#+begin_src emacs-lisp :noweb no-export :tangle no
  ;;(when (eq window-system 'x)
  ;;  (add-to-list 'load-path 
  ;;               "/usr/local/share/emacs/site-lisp/mu4e"))
#+end_src

Ahora sí se puede cargar =mu4e=. Sin embargo, este no se puede cargar con =use-package= porque no expone metadata que =use-package= pueda usar para la carga. 
 
#+begin_src emacs-lisp :noweb no-export
  (use-package mu4e
    :straight (:local-repo 
               "/run/current-system/sw/share/emacs/site-lisp/mu4e"
               :pre-build ())
    :init
    <<mu4e-init>>
    :commands mu4e
    :custom
    <<mu4e-custom>> 
    :hook
    <<mu4e-hook>>
    :general 
    <<mu4e-general>>
    :config 
    <<mu4e-config>>)
#+end_src

******* Configuración básica
******** Configuración de calendario
Para aceptar invitaciones de calendario ics, se necesita usar la vista de mensaje de gnus (activada por defecto en, por lo menos, versiones 1.5.11+) y la siguiente configuración

#+begin_src emacs-lisp noweb-ref mu4e-config
(require 'mu4e-icalendar)
(mu4e-icalendar-setup)
#+end_src

******** Comando para halar correo
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-get-mail-command "mbsync -c ~/.mbsyncrc -a")
#+end_src

******** Ruta a carpeta de correo y base de datos
En sistemas linux, =mu4e= se encarga de encontrar la carpeta en donde están guardados los correos sin problema. Sin embargo, en MSys2 (windows), esto es problemático porque las funciones =mu4e-root-maildir= y =mu4e-database-path= responden algo del estilo "/c/Users/...". Para resolver esto, se define el siguiente consejo para esas funciones.
#+begin_src emacs-lisp :noweb-ref mu4e-config-no :tangle no
  (when (eq window-system 'w32)
    (defun j/mu4e-maildir-hack (maildir-path)
      (replace-regexp-in-string "/c/" "c:/" maildir-path))
    (advice-add 'mu4e-root-maildir 
                :filter-return #'j/mu4e-maildir-hack)
    (advice-add 'mu4e-database-path 
                :filter-return #'j/mu4e-maildir-hack))
#+end_src

#+begin_src emacs-lisp :noweb-ref mu4e-config-no :tangle no
  (when (eq window-system 'w32)
    (setq mu4e-mu-binary "c:/msys64/usr/bin/mu.exe")
    (setq mu4e-debug t)

    ;; Unfortunately MSYS2 ignores the environment variables
    (setenv "TEMPDIR" (getenv "TEMP"))

    (defun jjgr-msys-to-windows-path (path)
      (replace-regexp-in-string
       "^/" "c:/msys64/"
       (replace-regexp-in-string "^/\\([c-e]\\)/" "\\1:/" path)))

    (defun jjgr-windows-to-msys-path (path)
      (replace-regexp-in-string "^\\([c-z]\\):[/\\]" "/\\1/" path))

    (defun jjgr-mu4e-change-plist (mu4e-options path-translator)
      (let (value)
        (when (setq value (plist-get mu4e-options :props))
          (jjgr-mu4e-change-plist value path-translator))
        (dolist (key '(:path :root-maildir :database-path :temp))
          (when (stringp (setq value (plist-get mu4e-options key)))
            (setq value (funcall path-translator value)
                  mu4e-options (plist-put mu4e-options key value)))))
      mu4e-options)

    (defun jjgr-mu4e~call-mu-filter (args)
      (let* ((mu4e-args (car args))
             (mu4e-options (cdr mu4e-args)))
        (jjgr-mu4e-change-plist mu4e-options
                                'jjgr-windows-to-msys-path))
      args)

    (defun jjgr-mu4e-log-filter (args)
      ;; Destructively modify server's messages, modifying
      ;; output paths
      (when (and (= (length args) 3)
                 (eq (car args) 'from-server)
                 (listp (third args)))
        (jjgr-mu4e-change-plist (third args) 'jjgr-msys-to-windows-path))
      args)

    (advice-add 'mu4e~call-mu :filter-args 'jjgr-mu4e~call-mu-filter)
    (advice-add 'mu4e-log :filter-args 'jjgr-mu4e-log-filter))

  (defun mu4e~draft-message-filename-construct (&optional flagstr)
    "Construct a randomized name for a message file with flags FLAGSTR.
  It looks something like
    <time>-<random>.<hostname>:2,
  You can append flags."
    (let* ((sysname (if (fboundp 'system-name)
                        (system-name)
                      (with-no-warnings system-name)))
           (sysname (if (string= sysname "") "localhost" sysname))
           (hostname (downcase
                      (save-match-data
                        (substring sysname
                                   (string-match "^[^.]+" sysname)
                                   (match-end 0))))))
      (format "%s.%04x%04x%04x%04x.%s%s2,%s"
              (format-time-string "%s" (current-time))
              (random 65535) (random 65535) (random 65535) (random 65535)
              hostname mu4e-maildir-info-delimiter (or flagstr ""))))
#+end_src

******** Ruta para descarga de adjuntos
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-attachment-dir  "~/Downloads")
#+end_src

******** Renombrar archivos al moverlos
Se necesita para que mbsync funcione correctamente
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-change-filenames-when-moving t)
#+end_src

******** Tiempo de actualización (en segundos)
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-update-interval (* 60 60))
#+end_src

******* Configuración de interfaz
******** Tamaño de columnas en vista de /headers/
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-headers-fields `((:human-date . 12)
                         (:flags . 4)
                         (:from-or-to . 15)
                         (:subject)))
#+end_src
******** Reducir ancho de texto en vista de mensaje y centrar
#+begin_src emacs-lisp :noweb-ref mu4e-hook :tangle no
  (mu4e-view-mode . olivetti-mode)
#+end_src
******** Actualizar /headers/ si llega más correo
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-headers-auto-update t)
#+end_src

******** HTML por defecto
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-view-prefer-html t)
#+end_src
******** No pedir confirmación para salir
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-confirm-quit nil)
#+end_src
******** Mostrar imágenes en vista de mensaje
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-view-show-images t)
#+end_src
******** Mostrar direcciones completas en lugar de sólo nombres
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-view-show-addresses 't)
#+end_src
******** Usar imagemagick de estar disponible
#+begin_src emacs-lisp :noweb-ref mu4e-config :tangle no
  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))
#+end_src
******** Tamaño de encabezado
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-headers-visible-lines 16)
#+end_src
******** Usar =ivy= para selección de carpetas
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-completing-read-function 'ivy-completing-read)
#+end_src

******** No incluir firma por defecto
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-compose-signature-auto-include nil)
#+end_src

******** Correcciones a libreta de direcciones
#+begin_src emacs-lisp :noweb-ref mu4e-init :tangle no
  (defun j/corregir-contactos (contact)
    (cond
     ((string-match "pomares@javeriana.edu.co" contact)
      (replace-regexp-in-string "pomares@javeriana.edu.co" "Alexandra Pomares <pomares@javeriana.edu.co>" contact))
     ((string-match "ragonzalez@javeriana.edu.co" contact)
      (replace-regexp-in-string "ragonzalez@javeriana.edu.co" "Rafael González <ragonzalez@javeriana.edu.co>" contact))
     (t contact)))
#+end_src

#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-contact-process-function 'j/corregir-contactos)
#+end_src

******** /Bookmarks/
La definición de /bookmarks/ en =mu4e= se hace a través de la variable =mu4e-bookmarks=. Si bien se le podría agregar /bookmarks/ a esa lista, ninguna de las opciones por defecto me sirve, así que la redefino por completo.
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-bookmarks `(( :name "PUJ último mes"
                            :query "maildir:/puj/INBOX date:4w.."
                            :key ?j)))
#+end_src

******** Acciones sobre mensajes
********* Agregar acción para ver mensaje en navegador web
#+begin_src emacs-lisp :noweb-ref mu4e-config :tangle no
  (add-to-list 'mu4e-view-actions
               '("hver en html" . mu4e-action-view-in-browser) t)
#+end_src

******* Envío de correo
La configuración de envió de correos está basada en [[https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/]].
******** Paquetes adicionales
#+begin_src emacs-lisp 
  (use-package org-mime
    :after mu4e)
  (use-package smtpmail
    :after mu4e)
#+end_src
******** Configuraciones específicas para envío de correo
********* Usar nuevo /frame/ para escritura de mensajes
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-compose-in-new-frame t)
#+end_src
********* No mover mensajes a carpeta Sent. Dejar que el servidor se encargue de eso
#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-sent-messages-behavior 'sent)
#+end_src
******** Contexto
Para tener envío desde 2 o más cuentas, se tienen que definir contextos.

#+begin_src emacs-lisp :noweb-ref mu4e-custom :tangle no
  (mu4e-context-policy 'pick-first)
  (mu4e-compose-context-policy 'always-ask)
#+end_src

********* Contexto PUJ
#+begin_src emacs-lisp :noweb-ref mu4e-config :tangle no :noweb no-export
  (add-to-list 
   'mu4e-contexts 
   (make-mu4e-context 
    :name "trabajo"
    :match-func
    (lambda (msg)
      (when msg
        (string-prefix-p "/puj" (mu4e-message-field msg :maildir))))
    :vars '((user-mail-address . "<<secreto("puj", "user")>>")
            (user-full-name . "<<secreto("puj", "nombre")>>")
            (mu4e-sent-folder . "/puj/Sent Items")
            (mu4e-drafts-folder . "/puj/Drafts")
            (mu4e-trash-folder . "/puj/Trash")
            (mu4e-refile-folder . "/puj/Archive")
            (smtpmail-queue-dir . "~/mbsync/puj/queue/cur")
            (message-send-mail-function . smtpmail-send-it)
            (smtpmail-smtp-user . "<<secreto("puj", "user")>>")
            (smtpmail-starttls-credentials . (("smtp.office365.com" 587 nil nil)))
            (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
            (smtpmail-default-smtp-server . "smtp.office365.com")
            (smtpmail-smtp-server . "smtp.office365.com")
            (smtpmail-smtp-service . 587)
            (smtpmail-debug-info . t)
            (smtpmail-debug-verbose . t))))
#+end_src

********* Contexto Gmail
#+begin_src emacs-lisp :noweb-ref mu4e-config :tangle no :noweb no-export
  (add-to-list 
   'mu4e-contexts 
   (make-mu4e-context   
    :name "gmail-jee" 
    :match-func
    (lambda (msg)
      (when msg
        (string-prefix-p "/gmail-jee" (mu4e-message-field msg :maildir))))
    :vars '((user-mail-address . "<<secreto("gmail-jee", "user")>>")
            (user-full-name . "<<secreto("gmail-jee", "nombre")>>")
            (mu4e-sent-folder . "/gmail-jee/[Gmail].Sent Mail")
            (mu4e-drafts-folder . "/gmail-jee/[Gmail].drafts")
            (mu4e-trash-folder . "/gmail-jee/[Gmail].Trash")
            (mu4e-refile-folder . "/gmail-jee/[Gmail].All Mail")
            (smtpmail-queue-dir . "~/mbsync/puj/queue/cur")
            (message-send-mail-function . smtpmail-send-it)
            (smtpmail-smtp-user . "<<secreto("gmail-jee", "user")>>")
            (smtpmail-starttls-credentials . (("smtp.gmail.com" 587 nil nil)))
            (smtpmail-auth-credentials . (expand-file-name "~/.authinfo.gpg"))
            (smtpmail-default-smtp-server . "smtp.gmail.com")
            (smtpmail-smtp-server . "smtp.gmail.com")
            (smtpmail-smtp-service . 587)
            (smtpmail-debug-info . t)
            (smtpmail-debug-verbose . t))))
#+end_src
******** Evitar inserción de cambios de línea al escribir correos
#+begin_src emacs-lisp :noweb-ref mu4e-hook :tangle no
  (mu4e-compose-mode . turn-off-auto-fill)
  (mu4e-compose-mode . visual-line-mode)
#+end_src
******** org-msg
Org-msg es un paquete que permite redactar correos electrónicos (desde mu4e) con funcionalidades de org-mode como formateo de código, secciones, tablas, firma en html, etc. En adición, permite responder correos con "formato outlook". Esto quiere decir que el mensaje original no se formatea en texto plano con > sino en formato amigable con outlook.

#+begin_src emacs-lisp :noweb no-export
  (use-package org-msg
    ;;:straight (prg-msg :type git :host github :repo "jeremy-compostella/org-msg"
    ;;                   :fork ( :host github
    ;;                           :repo "Chris00/org-msg"
    ;;                           :branch "MML"))
    :after mu4e
    :custom
    (mail-user-agent 'mu4e-user-agent)
    (org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t")
    (org-msg-startup "hidestars indent inlineimages")
    (org-msg-greeting-fmt "\nQué tal%s,\n\n")
    (org-msg-greeting-name-limit 3)
    (org-msg-text-plain-alternative t)
    (org-msg-signature "
            Saludos,
            ,#+begin_signature
            Juan E. Gómez-Morantes, PhD \\\\
            Profesor Asistente \\\\
            Departamento de Ingeniería de Sistemas \\\\
            Pontificia Universidad Javeriana \\\\
            ,#+end_signature")

    :config
    <<org-msg-config>>
    ;; Para evitar el problema de columnas angostas en outlook web, se defe redefinir la plantilla css usada por org-msg.
    ;; Eso está definido en =org-msg-default-style= y se asigna a =org-msg-enforce-css. A continuación se crea otra plantilla y se hace la asignación.
    (defconst j/org-msg-default-style
      (let* ((font-family '(font-family . "\"Arial\""))
             (font-size '(font-size . "10pt"))
             (font `(,font-family ,font-size))
             (line-height '(line-height . "10pt"))
             (bold '(font-weight . "bold"))
             (theme-color "#0071c5")
             (color `(color . ,theme-color))
             (table `(,@font (margin-top . "0px")))
             (ftl-number `(,@font ,color ,bold (text-align . "left")))
             (inline-modes '(asl c c++ conf cpp csv diff ditaa emacs-lisp
                                 fundamental ini json makefile man org plantuml
                                 python sh xml))
             (inline-src `((color . ,(face-foreground 'default))
                           (background-color . ,(face-background 'default))))
             (code-src
              (mapcar (lambda (mode)
                        `(code ,(intern (concat "src src-" (symbol-name mode)))
                               ,inline-src))
                      inline-modes)))
        `((del nil (,@font (color . "grey") (border-left . "none")
                           (text-decoration . "line-through") (margin-bottom . "0px")
                           (margin-top . "10px") (line-height . "11pt")))
          (a nil (,color))
          (a reply-header ((color . "black") (text-decoration . "none")))
          (div reply-header ((padding . "3.0pt 0in 0in 0in")
                             (border-top . "solid #e1e1e1 1.0pt")
                             (margin-bottom . "20px")))
          (span underline ((text-decoration . "underline")))
          (li nil (,@font ,line-height (margin-bottom . "0px")
                          (margin-top . "2px")))
          (nil org-ul ((list-style-type . "square")))
          (nil org-ol (,@font ,line-height (margin-bottom . "0px")
                              (margin-top . "0px") (margin-left . "30px")
                              (padding-top . "0px") (padding-left . "5px")))
          (nil signature (,@font (margin-bottom . "20px")))
          (blockquote nil ((padding-left . "5px") (margin-left . "10px")
                           (margin-top . "20px") (margin-bottom . "0")
                           (border-left . "3px solid #ccc") (font-style . "italic")
                           (background . "#f9f9f9")))
          (code nil (,font-size (font-family . "monospace") (background . "#f9f9f9")))
          ,@code-src
          (nil linenr ((padding-right . "1em")
                       (color . "black")
                       (background-color . "#aaaaaa")))
          (pre nil ((line-height . "12pt")
                    ,@inline-src
                    (margin . "0px")
                    (font-size . "9pt")
                    (font-family . "monospace")))
          (div org-src-container ((margin-top . "10px")))
          (nil figure-number ,ftl-number)
          (nil table-number)
          (caption nil ((text-align . "left")
                        (background . ,theme-color)
                        (color . "white")
                        ,bold))
          (nil t-above ((caption-side . "top")))
          (nil t-bottom ((caption-side . "bottom")))
          (nil listing-number ,ftl-number)
          (nil figure ,ftl-number)
          (nil org-src-name ,ftl-number)

          (table nil (,@table ,line-height (border-collapse . "collapse")))
          (th nil ((border . "1px solid black")
                   (background-color . ,theme-color)
                   (color . "white")
                   (padding-left . "10px") (padding-right . "10px")))
          (td nil (,@table (padding-left . "10px") (padding-right . "10px")
                           (background-color . "#f9f9f9") (border . "1px solid black")))
          (td org-left ((text-align . "left")))
          (td org-right ((text-align . "right")))
          (td org-center ((text-align . "center")))

          (div outline-text-4 ((margin-left . "15px")))
          (div outline-4 ((margin-left . "10px")))
          (h4 nil ((margin-bottom . "0px") (font-size . "11pt")
                   ,font-family))
          (h3 nil ((margin-bottom . "0px") (text-decoration . "underline")
                   ,color (font-size . "12pt")
                   ,font-family))
          (h2 nil ((margin-top . "20px") (margin-bottom . "20px")
                   (font-style . "italic") ,color (font-size . "13pt")
                   ,font-family))
          (h1 nil ((margin-top . "20px")
                   (margin-bottom . "0px") ,color (font-size . "12pt")
                   ,font-family))
          (p nil ((text-decoration . "none") (margin-bottom . "0px")
                  (margin-top . "10px") (line-height . "11pt") ,font-size
                  ,font-family
                  ;;(max-width . "100ch")
                  ))
          (div nil (,@font (line-height . "11pt"))))))
    (setq org-msg-enforce-css j/org-msg-default-style)
    ;; Evitar que org-msg interfiera con la aceptación de invitaciones de calendario 
    (defun j/deshabilitar-org-msg (orig-fun &rest args)
      (let ((activo org-msg-mode))
        (org-msg-mode -1)
        (apply orig-fun args)
        (if activo
            (org-msg-mode))))

    ;; (advice-add 'gnus-article-press-button :around #'j/deshabilitar-org-msg)
    ;; activar el modo
    (org-msg-mode))
#+end_src

******* Integración con =org-capture=
Una de las (la única?) razón de peso para tener el correo en emacs es la capacidad de crear TODOs en orgmode de forma rápida y que incluyan un link a un correo específico.

Esto se logra usando ~org-mu4e~ y ~org-capture~. Las instrucciones que seguí están en http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/.

******** Cargar módulo =org-mu4e=
Viene incluido en mu4e, pero está desactivado por defecto.

#+begin_src emacs-lisp :noweb-ref mu4e-config :tangle no
  (require 'org-mu4e)
#+end_src

******** Hacer que el link sea a un correo específico y no al resultado de una búsqueda
#+begin_src emacs-lisp :noweb-ref mu4e-config :tangle no
  (setq org-mu4e-link-query-in-headers-mode nil)
#+end_src
La plantilla de org-capture ya se definió antes en [[Org-capture]]

******* Acordes
******** Definir modo de inicio
#+begin_src emacs-lisp :noweb-ref mu4e-config :tangle no
  (add-to-list 'evil-normal-state-modes 'mu4e-main-mode)
  (add-to-list 'evil-normal-state-modes 'mu4e-headers-mode)
  (add-to-list 'evil-normal-state-modes 'mu4e-view-mode)
#+end_src
******** De acceso directo
#+begin_src emacs-lisp :noweb-ref mu4e-general :tangle no
  (j/lider
    :infix "o"
    "m" '(mu4e :which-key "mu4e")
    "n" '(mu4e-compose-new :which-key "nuevo correo"))
#+end_src

******** De consulta de correos
Los siguiente acordes funcionan en los modos =mu4e-main-mode=, =mu4e-headers-mode= y =mu4e-view-mode=.
#+begin_src emacs-lisp :noweb-ref mu4e-general :tangle no
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps '(mu4e-main-mode-map mu4e-headers-mode-map mu4e-view-mode-map)
    "b" '(mu4e-headers-search :which-key "buscar")
    "i" '(mu4e~headers-jump-to-maildir :which-key "ir a carptea"))
#+end_src
******** De actualización
El siguiente acorde funciona en los modos =mu4e-main-mode=, =mu4e-headers-mode= y =mu4e-view-mode=.
#+begin_src emacs-lisp :noweb-ref mu4e-general :tangle no
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps '(mu4e-headers-mode-map mu4e-view-mode-map mu4e-main-mode-map)
    "u" '(mu4e-update-mail-and-index :which-key "actualizar e indexar"))
#+end_src

******** De escritura de correos 
El siguiente acorde funciona en los modos =mu4e-main-mode=, =mu4e-headers-mode= y =mu4e-view-mode=.
#+begin_src emacs-lisp :noweb-ref mu4e-general :tangle no
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps '(mu4e-headers-mode-map mu4e-view-mode-map mu4e-main-mode-map)
    ;; Composición
    "n" '(mu4e-compose-new :which-key "nuevo correo"))
#+end_src

Los siguientes acordes funcionan en los modos =mu4e-headers-mode= y =mu4e-view-mode= ya que requieren un mensaje seleccionado.
#+begin_src emacs-lisp :noweb-ref mu4e-general :tangle no
  (j/lider-local
    :states '(normal insert emacs)
    :keymaps '(mu4e-headers-mode-map mu4e-view-mode-map)
    ;; Composición
    "r" '(mu4e-compose-reply :which-key "responder")
    "R" '(mu4e-compose-forward :which-key "re-enviar"))
#+end_src

******** De vista principal
#+begin_src emacs-lisp :noweb-ref mu4e-general :tangle no
  (general-define-key
   :states '(normal insert emacs)
   :keymaps 'mu4e-main-mode-map
   "q" '(mu4e-quit :which-key "salir")
   "b" '(mu4e-headers-search-bookmark :which-key "bookmarks"))
#+end_src

******** De vista /headers/
#+begin_src emacs-lisp :noweb-ref mu4e-general :tangle no
  (general-define-key
   :states '(normal insert emacs)
   :keymaps 'mu4e-headers-mode-map
   ;; Marcas 
   "D" '(mu4e-mark-unmark-all :which-key "desmarcar todos")
   "m" '(mu4e-headers-mark-for-move :which-key "mover")
   "r" '(mu4e-headers-mark-for-refile :which-key "refile")
   "e" '(mu4e-headers-mark-for-trash :which-key "eliminar")
   "x" '(mu4e-mark-execute-all :which-key "ejecutar acciones")
   "E" '(mu4e-headers-mark-for-delete :which-key "eliminar permanentemente")
   "d" '(mu4e-headers-mark-for-unmark :which-key "desmarcar")
   ;; Operación básica del modo
   "b" '(mu4e-headers-search-bookmark :which-key "bookmarks")
   "RET" '(mu4e-headers-view-message :which-key "ver mensaje") 
   "q" '(mu4e~headers-quit-buffer :which-key "salir")
   "j" '(mu4e-headers-next :which-key "siguiente mensaje")
   "k" '(mu4e-headers-prev :which-key "mensaje anterior"))

  (j/lider-local
    :states '(normal insert emacs)
    :keymaps 'mu4e-headers-mode-map
    "h" '(mu4e-headers-toggle-threading :which-key "alternar hilo")
    "l" '(mu4e-headers-toggle-include-related :which-key "alternar relacionados"))
#+end_src

******** De vista de mensaje
#+begin_src emacs-lisp :noweb-ref mu4e-general :tangle no
  (general-define-key
   :states '(normal insert emacs)
   :keymaps 'mu4e-view-mode-map
   ;; Marcas
   "m" '(mu4e-view-mark-for-move :which-key "mover")
   "r" '(mu4e-view-mark-for-refile :which-key "refile")
   "e" '(mu4e-view-mark-for-trash :which-key "eliminar")
   "E" '(mu4e-view-mark-for-delete :which-key "eliminar permanentemente")
   "x" '(mu4e-mark-execute-all :which-key "ejecutar acciones")
   "d" '(mu4e-view-mark-for-unmark :which-key "desmarcar")
   ;; Básicas del modo
   "b" '(mu4e-headers-search-bookmark :which-key "bookmarks")
   "q" '(mu4e~view-quit-buffer :which-key "salir")
   "J" '(mu4e-view-headers-next :which-key "siguiente mensaje")
   "K" '(mu4e-view-headers-prev :which-key "mensaje anterior")
   "j" '(evil-next-line :which-key "siguiente linea")
   "k" '(evil-previous-line :which-key "línea anterior"))

  (j/lider-local 
    :states '(normal insert emacs)
    :keymaps 'mu4e-view-mode-map
    "g" '(mu4e-view-go-to-url :which-key "ir a URL")
    "C" '(mu4e~view-compose-contact :which-key "copiar dirección en punto")
    "b" '(mu4e-view-open-attachment :which-key "abrir adjunto")
    "a" '(mu4e-view-action :which-key "acciones")
    "A" '(mu4e-view-mime-part-action :which-key "acciones de partes"))
#+end_src

******** De adjunto (en vista de mensaje)
#+begin_src emacs-lisp :noweb-ref mu4e-general :tangle no
  (j/lider-local 
    :states '(normal insert emacs)
    :keymaps 'gnus-mime-button-map
    "v" '(gnus-mime-view-part :which-key "ver")
    "g" '(gnus-mime-save-part :which-key "guardar")
    "a" '(gnus-mime-action-on-part :which-key "acciones"))
#+end_src

******* =mu4e-column-faces=
=mu4e-column-faces= agrega opciones para personalizar las fuentes usadas en las columnas de la vista de encabezados de =mu4e=.

#+begin_src emacs-lisp 
(use-package mu4e-column-faces
  :after mu4e
  :config (mu4e-column-faces-mode))
#+end_src

***** TODO =excorporate=
(Esconder correo)

=excorporate= es un paquete que sirve para consultar el calendario de exchange a través de EWS.
  
#+begin_src emacs-lisp :noweb no-export
  (use-package excorporate
    :defer 3
    :init
    <<excorporate-init>>

    :custom
    (excorporate-configuration
     '("<<secreto("puj", "user")>>" . "https://outlook.office365.com/EWS/Exchange.asmx"))
    (excorporate-calendar-show-day-function 'exco-calfw-show-day)

    :config
    (excorporate)
    <<excorporate-config>>)
#+end_src

****** Funciones para descarga de agenda a archivo org
******* Variable para ubicación del archivo de agenda
#+begin_src emacs-lisp :tangle no :noweb-ref excorporate-init
  (defcustom j/exco-org-save-file
    (concat user-emacs-directory ".exco-calendar.org")
    "Where `j/exco-org-show-day' and `j/exco-org-download-range' save
    thier results. This file's contents are overwritten on each invocation
    of the aforementioned functions")

  (defcustom j/exco-org-download-range
    15
    "The default range of days used for `j/exco-org-download-range'")
#+end_src

******* Funciones para descarga de agenda
#+begin_src emacs-lisp :tangle no :noweb-ref excorporate-config
  (require 'excorporate-org)

  (add-to-list 'org-agenda-files j/exco-org-save-file)

  (defun j/exco-org-insert-meetings (identifier response)
    "Insert the connection IDENTIFIER's meetings from RESPONSE."
    (with-current-buffer (find-file-noselect j/exco-org-save-file)
      (set-buffer-file-coding-system 'raw-text)
      (org-insert-time-stamp (current-time) t t "  + Last checked " "\n")
      (exco-calendar-item-iterate-general 
       response 
       (lambda (&rest arguments)
         (with-current-buffer (find-file-noselect j/exco-org-save-file)
           (set-buffer-file-coding-system 'raw-text)
           (org-mode)
           (let ((new-arguments arguments))
             (setf (nth 7 new-arguments)
                   (exco-resolve-organizer-email-address-synchronously
                    identifier organizer-structure))
             (apply #'exco-org-insert-meeting new-arguments))))
       subject start-internal end-internal
       location main-invitees optional-invitees item-identifier
       organizer-structure)
      (goto-char (point-min))
      (if (save-excursion (org-goto-first-child))
          (org-sort-entries t ?s)
        (forward-line 3)
        (insert "`♘\n"))))

  (defun exco-org-insert-meeting-headline (subject
                                           start-time end-time
                                           &optional item-identifier)
    "Insert and schedule a meeting.
        SUBJECT is the meeting's subject, START-TIME and END-TIME are the
        meeting's start and end times in the same format as is returned
        by `current-time'.  ITEM-IDENTIFIER is the opaque item
        identifier."
    (let* ((now (current-time))
           (keyword (if (time-less-p now end-time)
                        "TODO"
                      "DONE"))
           (schedule-string (if (equal (format-time-string "%Y-%m-%d" start-time)
                                       (format-time-string "%Y-%m-%d" end-time))
                                (concat (format-time-string "<%Y-%m-%d %a %H:%M--" start-time)
                                        (format-time-string "%H:%M>" end-time))
                              (format-time-string "<%Y-%m-%d %a %H:%M>" start-time))))
      (insert (format "** %s %s\n" keyword subject))
      (print schedule-string)
      (org-schedule nil schedule-string)
      (forward-line)
      (org-set-property "Identifier" (format "%S" item-identifier))
      (org-insert-time-stamp (current-time) t t "+ Retrieved " "\n")))

  (defun j/exco-get-meetings-for-days (identifier month day year month2 day2 year2 callback)
    "Return the meetings for the specified range of dates.
              IDENTIFIER is the connection identifier.  MONTH, DAY and YEAR are
              the range's start month, day and year, while MONTH2, DAY2, and YEAR2 
              are the range's closing month, day, and yera. Call CALLBACK with two
              arguments, IDENTIFIER and the server's response."
    (let* ((start-of-day-time-internal
            (apply #'encode-time `(0 0 0 ,day ,month ,year)))
           (start-of-day-date-time
            (exco-format-date-time start-of-day-time-internal))
           (start-of-next-day-date-time
            (exco-format-date-time (apply #'encode-time `(59 59 23 ,day2 ,month2 ,year2)))))
      (print start-of-day-date-time)
      (print start-of-next-day-date-time)
      (exco-operate
       identifier
       "FindItem"
       `(;; Main arguments.
         (;; RequestVersion is usually overridden by a fixed value in
          ;; the WSDL (the RequestServerVersion element); provide the
          ;; maximally-compatible Exchange2007 if the fixed value isn't
          ;; present.
          (RequestVersion (Version . "Exchange2007"))
          (Traversal . "Shallow")
          (ItemShape
           (BaseShape . "AllProperties"))
          ;; To aid productivity, excorporate-calfw automatically prunes your
          ;; meetings to a maximum of 100 per day.
          (CalendarView (MaxEntriesReturned . "100")
                        (StartDate . ,start-of-day-date-time)
                        (EndDate . ,start-of-next-day-date-time))
          (ParentFolderIds
           (DistinguishedFolderId (Id . "calendar"))))
         ;; Empty arguments.
         ,@(cdr (exco-operation-arity-nils identifier "FindItem")))
       callback)))

  (defun j/exco-org-download-range ()
    "Downloads the meetings for a range specifided by j/exco-org-download-range 
               and saves them to an org-file specified by j/exco-org-save-file"
    (delete-file j/exco-org-save-file)
    (exco-connection-iterate (lambda ()
                               (with-current-buffer (find-file-noselect j/exco-org-save-file)
                                 (set-buffer-file-coding-system 'raw-text)
                                 (delete-region (point-min) (point-max))
                                 (save-buffer))
                               (message "Saving calendar entries from Excorporate to %s ..."
                                        j/exco-org-save-file))
                             (lambda (identifier callback)
                               (j/exco-get-meetings-for-days identifier
                                                             (ts-month (ts-now))
                                                             (ts-day (ts-now))
                                                             (ts-year (ts-now))
                                                             (ts-month (ts-inc 'day 15 (ts-now)))
                                                             (ts-day (ts-inc 'day 15 (ts-now)))
                                                             (ts-year (ts-inc 'day 15 (ts-now)))
                                                             callback))
                             #'j/exco-org-insert-meetings
                             (lambda ()
                               (with-current-buffer (find-file-noselect j/exco-org-save-file)
                                 (set-buffer-file-coding-system 'raw-text)
                                 (save-buffer)
                                 (kill-this-buffer))
                               (message "Done saving calendar entries from Excorporate to %s."
                                        j/exco-org-save-file))))

  (defun j/exco-org-show-day (day month year)
    "Show meetings for the date specified by MONTH DAY YEAR."
    (delete-file j/exco-org-save-file)
    (exco-connection-iterate (lambda ()
                               (with-current-buffer (find-file-noselect j/exco-org-save-file)
                                 (set-buffer-file-coding-system 'raw-text)
                                 (save-buffer))
                               (message "Saving calendar entries from Excorporate to %s ..."
                                        j/exco-org-save-file))
                             (lambda (identifier callback)
                               (exco-get-meetings-for-day identifier
                                                          month day year
                                                          callback))
                             #'j/exco-org-insert-meetings
                             (lambda ()
                               (with-current-buffer (find-file-noselect j/exco-org-save-file)
                                 (save-buffer)
                                 (kill-this-buffer))
                               (message "Done saving calendar entries from Excorporate to %s."
                                        j/exco-org-save-file))))
  (run-with-timer 30 (* 60 60) 
                  (lambda () (j/exco-org-download-range)))
#+end_src

******* Eliminación de alertas por ~org-element-cache~
Debido a los problemas de /encoding/ en ~Excorporate~, se debe evitar que se muestren warnings de ~org-element-cache~ que aparecen al mostrar la agenda.

#+begin_src emacs-lisp :tangle no :noweb-ref excorporate-config
  (add-to-list 'warning-suppress-types '(org-element-cache))
#+end_src

***** =nov=
[[https://depp.brause.cc/nov.el/][=nov=]] sirve para lectura de epubs. 

Para que este paquete funcione es necesario tener instalado el paquete unzip en el sistema operativo.

#+begin_src emacs-lisp 
  (use-package nov
    :mode
    ("\\.epub\\'" . nov-mode)
  
    :hook
    (nov-mode . olivetti-mode)
    (nov-mode . (lambda ()
                  (face-remap-add-relative
                   'variable-pitch :family "EB Garamond"
                   :height 1.5))))
#+end_src

***** Latex, bibtex, y biblatex
****** =bibtex=
Formato para generación de identificadores de referencias:

#+begin_src emacs-lisp 
  (use-package bibtex
    :custom
    (bibtex-autokey-year-length 4)
    (bibtex-autokey-name-year-separator "")
    (bibtex-autokey-year-title-separator "")
    (bibtex-autokey-titleword-separator "")
    (bibtex-autokey-titlewords 0)
    (bibtex-autokey-titlewords-stretch 1)
    (bibtex-autokey-titleword-length 0)
    (bibtex-autokey-name-case-convert-function 'capitalize))
#+end_src

****** =biblio=
#+begin_src emacs-lisp 
  (use-package biblio
    :commands (biblio-lookup biblio-crossref-lookup doi-insert-bibtex)

    :custom
    (biblio-bibtex-use-autokey t "Usar configuración de modo bibtex para generación de llaves")      
    (biblio-crossref-user-email-address "ujhytghytg@gmail.com" "hace que las búsquedas en crossref tengan prioridad")

    :config
    (setq biblio-default-file "~/biblioteca/main.bib")

    (defun j/biblio--selection-insert-at-end-of-bibfile-callback (bibtex entry)
      "Add BIBTEX (from ENTRY) to end of a user-specified bibtex file."
      (with-current-buffer (find-file-noselect biblio-default-file)
        (goto-char (point-max))
        (insert bibtex))
      (message "Inserted bibtex entry for %S."
               (biblio--prepare-title (biblio-alist-get 'title entry))))

    (defun ans/biblio-selection-insert-end-of-bibfile ()
      "Insert BibTeX of current entry at the end of user-specified bibtex file."
      (interactive)
      (biblio--selection-forward-bibtex #'j/biblio--selection-insert-at-end-of-bibfile-callback))

    :general
    (general-define-key
     :state '(normal insert emacs)
     :keymaps 'biblio-selection-mode-map
     "I" '(ans/biblio-selection-insert-end-of-bibfile :which-key "insertar en main.bib")))
#+end_src

****** =ebib=
#+begin_src emacs-lisp 
  (use-package ebib
    :commands ebib

    :custom
    (ebib-citation-template "{Author|Editor} ({Date|Year}). {\"Title\".} {Publisher.}")
    (ebib-preload-bib-files '("~/biblioteca/main.bib"))
    (ebib-bibtex-dialect 'biblatex)
    (ebib-notes-directory "~/personal/orgmode/inbox/")
  
    :config
    (delete "edition" ebib-hidden-fields) 
    (delete "location" ebib-hidden-fields)
  
    :general
    (j/lider
    :infix "o"
     "e" '(ebib :which-key "ebib")))
#+end_src

****** =helm-bibtext=
#+begin_src emacs-lisp 
  (use-package helm-bibtex
    :custom
    (helm-bibtex-bibliography "~/biblioteca/main.bib")
    (helm-bibtex-notes-path "~/org-roam/"))
  #+end_src

***** =org-roam=
Para compilar el binario de SQLite que usa org-roam, es necesario instalar [[gcc]]

#+begin_src emacs-lisp :noweb no-export
  (use-package org-roam
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/org-roam/")
    (org-roam-completion-everywhere t)
    :config
    (org-roam-db-autosync-enable)
    :general
    <<org-roam-general>>)
#+end_src

****** Acordes globales
#+begin_src emacs-lisp :noweb-ref org-roam-general
  (j/lider
    :infix "r"
    "" '(:ignore t :which-key "org-roam")
    "i" '(org-roam-node-insert :which-key "insertar nodo")
    "a" '(org-roam-alias-add :which-key "alias")
    "u" '(org-roam-ui-mode :which-key "lanzar ui")
    "A" '(org-roam-alias-remove :which-key "quitar alias")
    "b" '(org-roam-buffer-toggle :which-key "mostrar buffer")
    "f" '(org-roam-node-find :which-key "buscar nodo"))
#+end_src

****** =org-roam-ui=
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    :custom
    (org-roam-ui-sync-theme t)
    (org-roam-ui-follow t)
    (org-roam-ui-update-on-save t)
    (org-roam-ui-open-on-start t))
#+end_src

****** =org-roam-bibtex=
[[https://github.com/org-roam/org-roam-bibtex][org-roam-bibtex]] integra =org-roam=, =ivy-bibtext=, y =org-ref=. En particular, hace que las notas asociadas a entradas de bibtex (que se toman desde =ivy-bibtex= o =org-ref=) se integren al grafo de =org-ref=. 

#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :config
    (org-roam-bibtex-mode 1))
#+end_src

***** Configuraciones adicionales
****** Eliminación de alertas por ~org-element-cache~
Debido a los problemas de /encoding/ en ~Excorporate~

*** Latex (con [[https://tug.org/texlive/][Tex Live]])
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
texlive.combined.scheme-full
#+end_src

** Juegos
*** [[https:mgba.io][Mgba]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
mgba
#+end_src

*** [[https://libretro.com/][Retroarch]] 
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
retroarch
#+end_src

**** Configuración
#+begin_src nix :tangle no :noweb-ref nixos-configuracion-paquetes
nixpkgs.config.retroarch = {
    #enableDolphin = true;
    enableMGBA = true;
    #enableMAME = true;
    enableSnes9x = true;  
    enableSameBoy = true;
    enableNestopia = true;
  };
#+end_src

** Comunicación y colaboración
*** [[https:git-scm.com][Git]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
git
#+end_src
*** [[https://zoom.us/][Zoom]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
unstable.zoom-us
#+end_src

*** [[https://teams.microsoft.com/][Microsoft Teams]] 
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
teams
#+end_src

*** [[https://signal.org/][Signal]] 
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
signal-desktop
#+end_src

*** [[https://kdeconnect.kde.org/][KDE Connect]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
libsForQt5.kdeconnect-kde
#gnomeExtensions.gsconnect
#+end_src

** Seguridad
*** [[https://www.keepassx.org/][Keepassx2]] 
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
keepassx2
#+end_src

*** [[https://gnupg.org/][Gnupg]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
gnupg
#+end_src

** Utilidades
*** [[https://linux.die.net/man/1/zip][Zip]] y [[https:linux.die.net/man/1/unzip][Unzip]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
unzip
zip
#+end_src

*** [[https://www.gnu.org/software/wget/][Wget]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
wget
#+end_src

*** [[https://www.nano-editor.org/][Nano]]
Nano viene por defecto en NixOS 21.05

*** [[https://www.gnu.org/software/autoconf/][Autoconf]] 
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
autoconf
#+end_src

*** [[https://github.com/tuxera/ntfs-3g][ntfs3g]]
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
ntfs3g
#+end_src

*** gcc
#+begin_src nix :tangle no :noweb-ref nixos-paquetes
gcc
#+end_src

* Footnotes

[fn:1] [[https://www.gnu.org/software/emacs/manual/html_node/efaq-w32/Spell-check.html]]

[fn:2] [[https://battlepenguin.com/tech/aspell-and-hunspell-a-tale-of-two-spell-checkers/]]

[fn:3] [[http://aspell.net/test/cur/]]

[fn:4] Publicada en octubre 2019

